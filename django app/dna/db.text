# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Algoresult(models.Model):
    algo_result_id = models.IntegerField(primary_key=True)
    student_id = models.BigIntegerField(blank=True, null=True)
    algo1_exam = models.CharField(max_length=10, blank=True, null=True)
    algo1_td = models.CharField(max_length=10, blank=True, null=True)
    algo1_tp = models.CharField(max_length=10, blank=True, null=True)
    algo1_avg = models.FloatField(blank=True, null=True)
    algo2_exam = models.CharField(max_length=10, blank=True, null=True)
    algo2_td = models.CharField(max_length=10, blank=True, null=True)
    algo2_tp = models.CharField(max_length=10, blank=True, null=True)
    algo2_avg = models.FloatField(blank=True, null=True)
    scholar_year = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'algoresult'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Bac(models.Model):
    tempd_id = models.IntegerField(primary_key=True)
    bac_id = models.CharField(unique=True, max_length=11, blank=True, null=True)
    student_id = models.BigIntegerField(blank=True, null=True)
    bac_year = models.IntegerField(blank=True, null=True)
    highshcool_path = models.ForeignKey('BacPath', models.DO_NOTHING, db_column='highshcool_path', blank=True, null=True)
    bac_avg = models.FloatField(blank=True, null=True)
    bac_feedback = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'bac'
