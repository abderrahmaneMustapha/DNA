{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n'use strict';\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\n\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar warning = require('fbjs/lib/warning');\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\n\n\nvar ReactDOMTextarea = {\n  getNativeProps: function (inst, props, context) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined; // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n\n    var nativeProps = assign({}, props, {\n      defaultValue: undefined,\n      value: undefined,\n      children: inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n    return nativeProps;\n  },\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.\n\n    var children = props.children;\n\n    if (children != null) {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;\n      }\n\n      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;\n\n      if (Array.isArray(children)) {\n        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    inst._wrapperState = {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      onChange: _handleChange.bind(inst)\n    };\n  },\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n    var value = LinkedValueUtils.getValue(props);\n\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/ReactDOMTextarea.js"],"names":["LinkedValueUtils","require","ReactDOMIDOperations","ReactUpdates","assign","invariant","warning","forceUpdateIfMounted","_rootNodeID","ReactDOMTextarea","updateWrapper","getNativeProps","inst","props","context","dangerouslySetInnerHTML","process","env","NODE_ENV","undefined","nativeProps","defaultValue","value","children","_wrapperState","initialValue","onChange","mountWrapper","checkPropTypes","_currentElement","_owner","Array","isArray","length","getValue","_handleChange","bind","updatePropertyByID","event","returnValue","executeOnChange","asap","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n'use strict';\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = {\n  getNativeProps: function (inst, props, context) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    var nativeProps = assign({}, props, {\n      defaultValue: undefined,\n      value: undefined,\n      children: inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = props.children;\n    if (children != null) {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;\n      }\n      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;\n      if (Array.isArray(children)) {\n        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(props);\n\n    inst._wrapperState = {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;"]},"metadata":{},"sourceType":"script"}