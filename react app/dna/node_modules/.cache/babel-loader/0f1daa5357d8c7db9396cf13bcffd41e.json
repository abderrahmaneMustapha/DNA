{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar getMarkupWrap = require('fbjs/lib/getMarkupWrap');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\n\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\n\nvar Danger = {\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function (markupList) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;\n    var nodeName;\n    var markupByNodeName = {}; // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n\n    for (var i = 0; i < markupList.length; i++) {\n      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n\n      var markupListByNodeName = markupByNodeName[nodeName]; // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n\n      var resultIndex;\n\n      for (resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex]; // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n\n          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP, // This index will be parsed back out below.\n          '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" ');\n        }\n      } // Render each group of markup with similar wrapping `nodeName`.\n\n\n      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.\n      );\n\n      for (var j = 0; j < renderNodes.length; ++j) {\n        var renderNode = renderNodes[j];\n\n        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;\n          resultList[resultIndex] = renderNode; // This should match resultList.length and markupList.length when\n          // we're done.\n\n          resultListAssignmentCount += 1;\n        } else if (process.env.NODE_ENV !== 'production') {\n          console.error('Danger: Discarding unexpected node:', renderNode);\n        }\n      }\n    } // Although resultList was populated out of order, it should now be a dense\n    // array.\n\n\n    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;\n    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;\n    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;\n    var newChild;\n\n    if (typeof markup === 'string') {\n      newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    } else {\n      newChild = markup;\n    }\n\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n};\nmodule.exports = Danger;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/Danger.js"],"names":["ExecutionEnvironment","require","createNodesFromMarkup","emptyFunction","getMarkupWrap","invariant","OPEN_TAG_NAME_EXP","RESULT_INDEX_ATTR","getNodeName","markup","substring","indexOf","Danger","dangerouslyRenderMarkup","markupList","canUseDOM","process","env","NODE_ENV","undefined","nodeName","markupByNodeName","i","length","resultList","resultListAssignmentCount","hasOwnProperty","markupListByNodeName","resultIndex","replace","renderNodes","join","j","renderNode","hasAttribute","getAttribute","removeAttribute","console","error","dangerouslyReplaceNodeWithMarkup","oldChild","tagName","toLowerCase","newChild","parentNode","replaceChild","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar getMarkupWrap = require('fbjs/lib/getMarkupWrap');\nvar invariant = require('fbjs/lib/invariant');\n\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\n\nvar Danger = {\n\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function (markupList) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;\n    var nodeName;\n    var markupByNodeName = {};\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n    for (var i = 0; i < markupList.length; i++) {\n      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n      var markupListByNodeName = markupByNodeName[nodeName];\n\n      // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n      var resultIndex;\n      for (resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex];\n\n          // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,\n          // This index will be parsed back out below.\n          '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" ');\n        }\n      }\n\n      // Render each group of markup with similar wrapping `nodeName`.\n      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.\n      );\n\n      for (var j = 0; j < renderNodes.length; ++j) {\n        var renderNode = renderNodes[j];\n        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n\n          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;\n\n          resultList[resultIndex] = renderNode;\n\n          // This should match resultList.length and markupList.length when\n          // we're done.\n          resultListAssignmentCount += 1;\n        } else if (process.env.NODE_ENV !== 'production') {\n          console.error('Danger: Discarding unexpected node:', renderNode);\n        }\n      }\n    }\n\n    // Although resultList was populated out of order, it should now be a dense\n    // array.\n    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;\n\n    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;\n\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;\n    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;\n\n    var newChild;\n    if (typeof markup === 'string') {\n      newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    } else {\n      newChild = markup;\n    }\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n\n};\n\nmodule.exports = Danger;"]},"metadata":{},"sourceType":"script"}