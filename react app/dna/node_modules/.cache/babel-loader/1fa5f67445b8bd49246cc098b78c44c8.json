{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n/**\n * Injectable ordering of event plugins.\n */\n\n\nvar EventPluginOrder = null;\n/**\n * Injectable mapping from names to event plugin modules.\n */\n\nvar namesToPlugins = {};\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\n\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;\n\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n\n    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;\n    }\n  }\n}\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\n\n\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);\n      }\n    }\n\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\n\n\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n}\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\n\n\nvar EventPluginRegistry = {\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {\n    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined; // Clone the ordering so it cannot be dynamically mutated.\n\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n\n      var PluginModule = injectedNamesToPlugins[pluginName];\n\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];\n\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    EventPluginOrder = null;\n\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n\n    EventPluginRegistry.plugins.length = 0;\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n};\nmodule.exports = EventPluginRegistry;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/EventPluginRegistry.js"],"names":["invariant","require","EventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","PluginModule","pluginIndex","indexOf","process","env","NODE_ENV","undefined","EventPluginRegistry","plugins","extractEvents","publishedEvents","eventTypes","eventName","publishEventForPlugin","dispatchConfig","eventNameDispatchConfigs","hasOwnProperty","phasedRegistrationNames","phaseName","phasedRegistrationName","publishRegistrationName","registrationName","registrationNameModules","registrationNameDependencies","dependencies","injectEventPluginOrder","InjectedEventPluginOrder","Array","prototype","slice","call","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","getPluginModuleForEvent","event","phase","_resetEventPlugins","length","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {\n    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;"]},"metadata":{},"sourceType":"script"}