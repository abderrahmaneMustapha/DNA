{"ast":null,"code":"'use strict';\n\nvar utils = require('../utils');\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\n\n\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n  utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    }\n  });\n  utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {\n    if (utils.isObject(config2[prop])) {\n      config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n    } else if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (utils.isObject(config1[prop])) {\n      config[prop] = utils.deepMerge(config1[prop]);\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n  utils.forEach(['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath'], function defaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n  return config;\n};","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/axios/lib/core/mergeConfig.js"],"names":["utils","require","module","exports","mergeConfig","config1","config2","config","forEach","valueFromConfig2","prop","mergeDeepProperties","isObject","deepMerge","defaultToConfig2"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAEA;;;;;;;;;;AAQAC,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,OAA9B,EAAuC;AACtD;AACAA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIC,MAAM,GAAG,EAAb;AAEAP,EAAAA,KAAK,CAACQ,OAAN,CAAc,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,EAA4B,MAA5B,CAAd,EAAmD,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AACjF,QAAI,OAAOJ,OAAO,CAACI,IAAD,CAAd,KAAyB,WAA7B,EAA0C;AACxCH,MAAAA,MAAM,CAACG,IAAD,CAAN,GAAeJ,OAAO,CAACI,IAAD,CAAtB;AACD;AACF,GAJD;AAMAV,EAAAA,KAAK,CAACQ,OAAN,CAAc,CAAC,SAAD,EAAY,MAAZ,EAAoB,OAApB,CAAd,EAA4C,SAASG,mBAAT,CAA6BD,IAA7B,EAAmC;AAC7E,QAAIV,KAAK,CAACY,QAAN,CAAeN,OAAO,CAACI,IAAD,CAAtB,CAAJ,EAAmC;AACjCH,MAAAA,MAAM,CAACG,IAAD,CAAN,GAAeV,KAAK,CAACa,SAAN,CAAgBR,OAAO,CAACK,IAAD,CAAvB,EAA+BJ,OAAO,CAACI,IAAD,CAAtC,CAAf;AACD,KAFD,MAEO,IAAI,OAAOJ,OAAO,CAACI,IAAD,CAAd,KAAyB,WAA7B,EAA0C;AAC/CH,MAAAA,MAAM,CAACG,IAAD,CAAN,GAAeJ,OAAO,CAACI,IAAD,CAAtB;AACD,KAFM,MAEA,IAAIV,KAAK,CAACY,QAAN,CAAeP,OAAO,CAACK,IAAD,CAAtB,CAAJ,EAAmC;AACxCH,MAAAA,MAAM,CAACG,IAAD,CAAN,GAAeV,KAAK,CAACa,SAAN,CAAgBR,OAAO,CAACK,IAAD,CAAvB,CAAf;AACD,KAFM,MAEA,IAAI,OAAOL,OAAO,CAACK,IAAD,CAAd,KAAyB,WAA7B,EAA0C;AAC/CH,MAAAA,MAAM,CAACG,IAAD,CAAN,GAAeL,OAAO,CAACK,IAAD,CAAtB;AACD;AACF,GAVD;AAYAV,EAAAA,KAAK,CAACQ,OAAN,CAAc,CACZ,SADY,EACD,kBADC,EACmB,mBADnB,EACwC,kBADxC,EAEZ,SAFY,EAED,iBAFC,EAEkB,SAFlB,EAE6B,cAF7B,EAE6C,gBAF7C,EAGZ,gBAHY,EAGM,kBAHN,EAG0B,oBAH1B,EAGgD,kBAHhD,EAIZ,gBAJY,EAIM,cAJN,EAIsB,WAJtB,EAImC,YAJnC,EAIiD,aAJjD,EAKZ,YALY,CAAd,EAMG,SAASM,gBAAT,CAA0BJ,IAA1B,EAAgC;AACjC,QAAI,OAAOJ,OAAO,CAACI,IAAD,CAAd,KAAyB,WAA7B,EAA0C;AACxCH,MAAAA,MAAM,CAACG,IAAD,CAAN,GAAeJ,OAAO,CAACI,IAAD,CAAtB;AACD,KAFD,MAEO,IAAI,OAAOL,OAAO,CAACK,IAAD,CAAd,KAAyB,WAA7B,EAA0C;AAC/CH,MAAAA,MAAM,CAACG,IAAD,CAAN,GAAeL,OAAO,CAACK,IAAD,CAAtB;AACD;AACF,GAZD;AAcA,SAAOH,MAAP;AACD,CAtCD","sourcesContent":["'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    }\n  });\n\n  utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {\n    if (utils.isObject(config2[prop])) {\n      config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n    } else if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (utils.isObject(config1[prop])) {\n      config[prop] = utils.deepMerge(config1[prop]);\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  utils.forEach([\n    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength',\n    'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken',\n    'socketPath'\n  ], function defaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  return config;\n};\n"]},"metadata":{},"sourceType":"script"}