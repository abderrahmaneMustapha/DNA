{"ast":null,"code":"/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentEnvironment\n */\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar injected = false;\nvar ReactComponentEnvironment = {\n  /**\n   * Optionally injectable environment dependent cleanup hook. (server vs.\n   * browser etc). Example: A browser system caches DOM nodes based on component\n   * ID and must remove that cache entry when this instance is unmounted.\n   */\n  unmountIDFromEnvironment: null,\n\n  /**\n   * Optionally injectable hook for swapping out mount images in the middle of\n   * the tree.\n   */\n  replaceNodeWithMarkupByID: null,\n\n  /**\n   * Optionally injectable hook for processing a queue of child updates. Will\n   * later move into MultiChildComponents.\n   */\n  processChildrenUpdates: null,\n  injection: {\n    injectEnvironment: function (environment) {\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;\n      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;\n      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;\n      injected = true;\n    }\n  }\n};\nmodule.exports = ReactComponentEnvironment;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/ReactComponentEnvironment.js"],"names":["invariant","require","injected","ReactComponentEnvironment","unmountIDFromEnvironment","replaceNodeWithMarkupByID","processChildrenUpdates","injection","injectEnvironment","environment","process","env","NODE_ENV","undefined","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIC,QAAQ,GAAG,KAAf;AAEA,IAAIC,yBAAyB,GAAG;AAE9B;;;;;AAKAC,EAAAA,wBAAwB,EAAE,IAPI;;AAS9B;;;;AAIAC,EAAAA,yBAAyB,EAAE,IAbG;;AAe9B;;;;AAIAC,EAAAA,sBAAsB,EAAE,IAnBM;AAqB9BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,iBAAiB,EAAE,UAAUC,WAAV,EAAuB;AACxC,OAAC,CAACP,QAAF,GAAaQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCZ,SAAS,CAAC,KAAD,EAAQ,uEAAR,CAAjD,GAAoIA,SAAS,CAAC,KAAD,CAA1J,GAAoKa,SAApK;AACAV,MAAAA,yBAAyB,CAACC,wBAA1B,GAAqDK,WAAW,CAACL,wBAAjE;AACAD,MAAAA,yBAAyB,CAACE,yBAA1B,GAAsDI,WAAW,CAACJ,yBAAlE;AACAF,MAAAA,yBAAyB,CAACG,sBAA1B,GAAmDG,WAAW,CAACH,sBAA/D;AACAJ,MAAAA,QAAQ,GAAG,IAAX;AACD;AAPQ;AArBmB,CAAhC;AAiCAY,MAAM,CAACC,OAAP,GAAiBZ,yBAAjB","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactComponentEnvironment\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar injected = false;\n\nvar ReactComponentEnvironment = {\n\n  /**\n   * Optionally injectable environment dependent cleanup hook. (server vs.\n   * browser etc). Example: A browser system caches DOM nodes based on component\n   * ID and must remove that cache entry when this instance is unmounted.\n   */\n  unmountIDFromEnvironment: null,\n\n  /**\n   * Optionally injectable hook for swapping out mount images in the middle of\n   * the tree.\n   */\n  replaceNodeWithMarkupByID: null,\n\n  /**\n   * Optionally injectable hook for processing a queue of child updates. Will\n   * later move into MultiChildComponents.\n   */\n  processChildrenUpdates: null,\n\n  injection: {\n    injectEnvironment: function (environment) {\n      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;\n      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;\n      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;\n      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;\n      injected = true;\n    }\n  }\n\n};\n\nmodule.exports = ReactComponentEnvironment;"]},"metadata":{},"sourceType":"script"}