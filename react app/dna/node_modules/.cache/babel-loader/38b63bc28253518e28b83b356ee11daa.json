{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n'use strict';\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\n\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function (object, objectName, methodNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);\n      }\n    }\n  },\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function (objName, fnName, func) {\n    if (process.env.NODE_ENV !== 'production') {\n      var measuredFunc = null;\n\n      var wrapper = function () {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n\n          return measuredFunc.apply(this, arguments);\n        }\n\n        return func.apply(this, arguments);\n      };\n\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n\n    return func;\n  },\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function (measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\n\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/ReactPerf.js"],"names":["ReactPerf","enableMeasure","storedMeasure","_noMeasure","measureMethods","object","objectName","methodNames","process","env","NODE_ENV","key","hasOwnProperty","measure","objName","fnName","func","measuredFunc","wrapper","apply","arguments","displayName","injection","injectMeasure","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;AAEA;;;;;AAIA,IAAIA,SAAS,GAAG;AACd;;;;AAIAC,EAAAA,aAAa,EAAE,KALD;;AAOd;;;;AAIAC,EAAAA,aAAa,EAAEC,UAXD;;AAad;;;;;AAKAC,EAAAA,cAAc,EAAE,UAAUC,MAAV,EAAkBC,UAAlB,EAA8BC,WAA9B,EAA2C;AACzD,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,WAAK,IAAIC,GAAT,IAAgBJ,WAAhB,EAA6B;AAC3B,YAAI,CAACA,WAAW,CAACK,cAAZ,CAA2BD,GAA3B,CAAL,EAAsC;AACpC;AACD;;AACDN,QAAAA,MAAM,CAACM,GAAD,CAAN,GAAcX,SAAS,CAACa,OAAV,CAAkBP,UAAlB,EAA8BC,WAAW,CAACI,GAAD,CAAzC,EAAgDN,MAAM,CAACM,GAAD,CAAtD,CAAd;AACD;AACF;AACF,GA3Ba;;AA6Bd;;;;;;;;AAQAE,EAAAA,OAAO,EAAE,UAAUC,OAAV,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAiC;AACxC,QAAIR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIO,YAAY,GAAG,IAAnB;;AACA,UAAIC,OAAO,GAAG,YAAY;AACxB,YAAIlB,SAAS,CAACC,aAAd,EAA6B;AAC3B,cAAI,CAACgB,YAAL,EAAmB;AACjBA,YAAAA,YAAY,GAAGjB,SAAS,CAACE,aAAV,CAAwBY,OAAxB,EAAiCC,MAAjC,EAAyCC,IAAzC,CAAf;AACD;;AACD,iBAAOC,YAAY,CAACE,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAP;AACD;;AACD,eAAOJ,IAAI,CAACG,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;AACD,OARD;;AASAF,MAAAA,OAAO,CAACG,WAAR,GAAsBP,OAAO,GAAG,GAAV,GAAgBC,MAAtC;AACA,aAAOG,OAAP;AACD;;AACD,WAAOF,IAAP;AACD,GArDa;AAuDdM,EAAAA,SAAS,EAAE;AACT;;;AAGAC,IAAAA,aAAa,EAAE,UAAUV,OAAV,EAAmB;AAChCb,MAAAA,SAAS,CAACE,aAAV,GAA0BW,OAA1B;AACD;AANQ;AAvDG,CAAhB;AAiEA;;;;;;;;;AAQA,SAASV,UAAT,CAAoBW,OAApB,EAA6BC,MAA7B,EAAqCC,IAArC,EAA2C;AACzC,SAAOA,IAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBzB,SAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function (object, objectName, methodNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);\n      }\n    }\n  },\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function (objName, fnName, func) {\n    if (process.env.NODE_ENV !== 'production') {\n      var measuredFunc = null;\n      var wrapper = function () {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function (measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;"]},"metadata":{},"sourceType":"script"}