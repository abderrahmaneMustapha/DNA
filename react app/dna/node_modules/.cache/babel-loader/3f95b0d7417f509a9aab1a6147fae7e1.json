{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n'use strict';\n\nvar EventConstants = require('./EventConstants');\n\nvar EventPropagators = require('./EventPropagators');\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar ReactInputSelection = require('./ReactInputSelection');\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nvar isTextInputElement = require('./isTextInputElement');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onSelect: null\n      }),\n      captured: keyOf({\n        onSelectCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }\n};\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false; // Track whether a listener exists for this plugin. If none exist, we do\n// not extract events.\n\nvar hasListener = false;\nvar ON_SELECT_KEY = keyOf({\n  onSelect: null\n});\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\n\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\n\n\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  } // Only fire when selection has actually changed.\n\n\n  var currentSelection = getSelection(activeElement);\n\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n    return syntheticEvent;\n  }\n\n  return null;\n}\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\n\n\nvar SelectEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    if (!hasListener) {\n      return null;\n    }\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n\n        break;\n\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n\n      case topLevelTypes.topSelectionChange:\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n\n      // falls through\n\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  },\n  didPutListener: function (id, registrationName, listener) {\n    if (registrationName === ON_SELECT_KEY) {\n      hasListener = true;\n    }\n  }\n};\nmodule.exports = SelectEventPlugin;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/SelectEventPlugin.js"],"names":["EventConstants","require","EventPropagators","ExecutionEnvironment","ReactInputSelection","SyntheticEvent","getActiveElement","isTextInputElement","keyOf","shallowEqual","topLevelTypes","skipSelectionChangeEvent","canUseDOM","document","documentMode","eventTypes","select","phasedRegistrationNames","bubbled","onSelect","captured","onSelectCapture","dependencies","topBlur","topContextMenu","topFocus","topKeyDown","topMouseDown","topMouseUp","topSelectionChange","activeElement","activeElementID","lastSelection","mouseDown","hasListener","ON_SELECT_KEY","getSelection","node","hasSelectionCapabilities","start","selectionStart","end","selectionEnd","window","selection","anchorNode","anchorOffset","focusNode","focusOffset","range","createRange","parentElement","text","top","boundingTop","left","boundingLeft","constructSelectEvent","nativeEvent","nativeEventTarget","currentSelection","syntheticEvent","getPooled","type","target","accumulateTwoPhaseDispatches","SelectEventPlugin","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","contentEditable","topKeyUp","didPutListener","id","registrationName","listener","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SelectEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getActiveElement = require('fbjs/lib/getActiveElement');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\nvar shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onSelect: null }),\n      captured: keyOf({ onSelectCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]\n  }\n};\n\nvar activeElement = null;\nvar activeElementID = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n// Track whether a listener exists for this plugin. If none exist, we do\n// not extract events.\nvar hasListener = false;\nvar ON_SELECT_KEY = keyOf({ onSelect: null });\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  } else if (document.selection) {\n    var range = document.selection.createRange();\n    return {\n      parentElement: range.parentElement(),\n      text: range.text,\n      top: range.boundingTop,\n      left: range.boundingLeft\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);\n\n    return syntheticEvent;\n  }\n\n  return null;\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    if (!hasListener) {\n      return null;\n    }\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case topLevelTypes.topFocus:\n        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {\n          activeElement = topLevelTarget;\n          activeElementID = topLevelTargetID;\n          lastSelection = null;\n        }\n        break;\n      case topLevelTypes.topBlur:\n        activeElement = null;\n        activeElementID = null;\n        lastSelection = null;\n        break;\n\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case topLevelTypes.topMouseDown:\n        mouseDown = true;\n        break;\n      case topLevelTypes.topContextMenu:\n      case topLevelTypes.topMouseUp:\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n      case topLevelTypes.topSelectionChange:\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n      // falls through\n      case topLevelTypes.topKeyDown:\n      case topLevelTypes.topKeyUp:\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  },\n\n  didPutListener: function (id, registrationName, listener) {\n    if (registrationName === ON_SELECT_KEY) {\n      hasListener = true;\n    }\n  }\n};\n\nmodule.exports = SelectEventPlugin;"]},"metadata":{},"sourceType":"script"}