{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMPropertyOperations\n * @typechecks static-only\n */\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\n\nvar ReactPerf = require('./ReactPerf');\n\nvar quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');\n\nvar warning = require('fbjs/lib/warning'); // Simplified subset\n\n\nvar VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\\w\\.\\-]*$/;\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\n\nfunction isAttributeNameSafe(attributeName) {\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {\n    return true;\n  }\n\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {\n    return false;\n  }\n\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n\n  illegalAttributeNameCache[attributeName] = true;\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;\n  return false;\n}\n\nfunction shouldIgnoreValue(propertyInfo, value) {\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var reactProps = {\n    children: true,\n    dangerouslySetInnerHTML: true,\n    key: true,\n    ref: true\n  };\n  var warnedProperties = {};\n\n  var warnUnknownProperty = function (name) {\n    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return;\n    }\n\n    warnedProperties[name] = true;\n    var lowerCasedName = name.toLowerCase(); // data-* attributes should be lowercase; suggest the lowercase version\n\n    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null; // For now, only warn when we have a suggested correction. This prevents\n    // logging too much when using transferPropsTo.\n\n    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;\n  };\n}\n/**\n * Operations for dealing with DOM properties.\n */\n\n\nvar DOMPropertyOperations = {\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function (id) {\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);\n  },\n  setAttributeForID: function (node, id) {\n    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function (name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n\n    if (propertyInfo) {\n      if (shouldIgnoreValue(propertyInfo, value)) {\n        return '';\n      }\n\n      var attributeName = propertyInfo.attributeName;\n\n      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n        return attributeName + '=\"\"';\n      }\n\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n\n      return name + '=' + quoteAttributeValueForBrowser(value);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n\n    return null;\n  },\n\n  /**\n   * Creates markup for a custom property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {string} Markup string, or empty string if the property was invalid.\n   */\n  createMarkupForCustomAttribute: function (name, value) {\n    if (!isAttributeNameSafe(name) || value == null) {\n      return '';\n    }\n\n    return name + '=' + quoteAttributeValueForBrowser(value);\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function (node, name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(propertyInfo, value)) {\n        this.deleteValueForProperty(node, name);\n      } else if (propertyInfo.mustUseAttribute) {\n        var attributeName = propertyInfo.attributeName;\n        var namespace = propertyInfo.attributeNamespace; // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n\n        if (namespace) {\n          node.setAttributeNS(namespace, attributeName, '' + value);\n        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n          node.setAttribute(attributeName, '');\n        } else {\n          node.setAttribute(attributeName, '' + value);\n        }\n      } else {\n        var propName = propertyInfo.propertyName; // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the\n        // property type before comparing; only `value` does and is string.\n\n        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {\n          // Contrary to `setAttribute`, object properties are properly\n          // `toString`ed by IE8/9.\n          node[propName] = value;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      DOMPropertyOperations.setValueForAttribute(node, name, value);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n  },\n  setValueForAttribute: function (node, name, value) {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n\n    if (value == null) {\n      node.removeAttribute(name);\n    } else {\n      node.setAttribute(name, '' + value);\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function (node, name) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (propertyInfo.mustUseAttribute) {\n        node.removeAttribute(propertyInfo.attributeName);\n      } else {\n        var propName = propertyInfo.propertyName;\n        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);\n\n        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {\n          node[propName] = defaultValue;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n  }\n};\nReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {\n  setValueForProperty: 'setValueForProperty',\n  setValueForAttribute: 'setValueForAttribute',\n  deleteValueForProperty: 'deleteValueForProperty'\n});\nmodule.exports = DOMPropertyOperations;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/DOMPropertyOperations.js"],"names":["DOMProperty","require","ReactPerf","quoteAttributeValueForBrowser","warning","VALID_ATTRIBUTE_NAME_REGEX","illegalAttributeNameCache","validatedAttributeNameCache","isAttributeNameSafe","attributeName","hasOwnProperty","test","process","env","NODE_ENV","undefined","shouldIgnoreValue","propertyInfo","value","hasBooleanValue","hasNumericValue","isNaN","hasPositiveNumericValue","hasOverloadedBooleanValue","reactProps","children","dangerouslySetInnerHTML","key","ref","warnedProperties","warnUnknownProperty","name","lowerCasedName","toLowerCase","standardName","isCustomAttribute","getPossibleStandardName","DOMPropertyOperations","createMarkupForID","id","ID_ATTRIBUTE_NAME","setAttributeForID","node","setAttribute","createMarkupForProperty","properties","createMarkupForCustomAttribute","setValueForProperty","mutationMethod","deleteValueForProperty","mustUseAttribute","namespace","attributeNamespace","setAttributeNS","propName","propertyName","hasSideEffects","setValueForAttribute","removeAttribute","defaultValue","getDefaultValueForProperty","nodeName","measureMethods","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMPropertyOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactPerf = require('./ReactPerf');\n\nvar quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');\nvar warning = require('fbjs/lib/warning');\n\n// Simplified subset\nvar VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\\w\\.\\-]*$/;\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\n\nfunction isAttributeNameSafe(attributeName) {\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {\n    return true;\n  }\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {\n    return false;\n  }\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n  illegalAttributeNameCache[attributeName] = true;\n  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;\n  return false;\n}\n\nfunction shouldIgnoreValue(propertyInfo, value) {\n  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  var reactProps = {\n    children: true,\n    dangerouslySetInnerHTML: true,\n    key: true,\n    ref: true\n  };\n  var warnedProperties = {};\n\n  var warnUnknownProperty = function (name) {\n    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {\n      return;\n    }\n\n    warnedProperties[name] = true;\n    var lowerCasedName = name.toLowerCase();\n\n    // data-* attributes should be lowercase; suggest the lowercase version\n    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;\n\n    // For now, only warn when we have a suggested correction. This prevents\n    // logging too much when using transferPropsTo.\n    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;\n  };\n}\n\n/**\n * Operations for dealing with DOM properties.\n */\nvar DOMPropertyOperations = {\n\n  /**\n   * Creates markup for the ID property.\n   *\n   * @param {string} id Unescaped ID.\n   * @return {string} Markup string.\n   */\n  createMarkupForID: function (id) {\n    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);\n  },\n\n  setAttributeForID: function (node, id) {\n    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);\n  },\n\n  /**\n   * Creates markup for a property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {?string} Markup string, or null if the property was invalid.\n   */\n  createMarkupForProperty: function (name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      if (shouldIgnoreValue(propertyInfo, value)) {\n        return '';\n      }\n      var attributeName = propertyInfo.attributeName;\n      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n        return attributeName + '=\"\"';\n      }\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      if (value == null) {\n        return '';\n      }\n      return name + '=' + quoteAttributeValueForBrowser(value);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n    return null;\n  },\n\n  /**\n   * Creates markup for a custom property.\n   *\n   * @param {string} name\n   * @param {*} value\n   * @return {string} Markup string, or empty string if the property was invalid.\n   */\n  createMarkupForCustomAttribute: function (name, value) {\n    if (!isAttributeNameSafe(name) || value == null) {\n      return '';\n    }\n    return name + '=' + quoteAttributeValueForBrowser(value);\n  },\n\n  /**\n   * Sets the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   * @param {*} value\n   */\n  setValueForProperty: function (node, name, value) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod) {\n        mutationMethod(node, value);\n      } else if (shouldIgnoreValue(propertyInfo, value)) {\n        this.deleteValueForProperty(node, name);\n      } else if (propertyInfo.mustUseAttribute) {\n        var attributeName = propertyInfo.attributeName;\n        var namespace = propertyInfo.attributeNamespace;\n        // `setAttribute` with objects becomes only `[object]` in IE8/9,\n        // ('' + value) makes it output the correct toString()-value.\n        if (namespace) {\n          node.setAttributeNS(namespace, attributeName, '' + value);\n        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\n          node.setAttribute(attributeName, '');\n        } else {\n          node.setAttribute(attributeName, '' + value);\n        }\n      } else {\n        var propName = propertyInfo.propertyName;\n        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the\n        // property type before comparing; only `value` does and is string.\n        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {\n          // Contrary to `setAttribute`, object properties are properly\n          // `toString`ed by IE8/9.\n          node[propName] = value;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      DOMPropertyOperations.setValueForAttribute(node, name, value);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n  },\n\n  setValueForAttribute: function (node, name, value) {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n    if (value == null) {\n      node.removeAttribute(name);\n    } else {\n      node.setAttribute(name, '' + value);\n    }\n  },\n\n  /**\n   * Deletes the value for a property on a node.\n   *\n   * @param {DOMElement} node\n   * @param {string} name\n   */\n  deleteValueForProperty: function (node, name) {\n    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;\n    if (propertyInfo) {\n      var mutationMethod = propertyInfo.mutationMethod;\n      if (mutationMethod) {\n        mutationMethod(node, undefined);\n      } else if (propertyInfo.mustUseAttribute) {\n        node.removeAttribute(propertyInfo.attributeName);\n      } else {\n        var propName = propertyInfo.propertyName;\n        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);\n        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {\n          node[propName] = defaultValue;\n        }\n      }\n    } else if (DOMProperty.isCustomAttribute(name)) {\n      node.removeAttribute(name);\n    } else if (process.env.NODE_ENV !== 'production') {\n      warnUnknownProperty(name);\n    }\n  }\n\n};\n\nReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {\n  setValueForProperty: 'setValueForProperty',\n  setValueForAttribute: 'setValueForAttribute',\n  deleteValueForProperty: 'deleteValueForProperty'\n});\n\nmodule.exports = DOMPropertyOperations;"]},"metadata":{},"sourceType":"script"}