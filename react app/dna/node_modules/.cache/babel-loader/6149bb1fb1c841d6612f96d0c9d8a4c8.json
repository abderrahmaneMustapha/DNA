{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createArrayFromMixed\n * @typechecks\n */\n'use strict';\n\nvar toArray = require('./toArray');\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\n\n\nfunction hasArrayNature(obj) {\n  return (// not null/false\n    !!obj && ( // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') && // quacks like an array\n    'length' in obj && // not window\n    !('setInterval' in obj) && // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && ( // a real array\n    Array.isArray(obj) || // arguments\n    'callee' in obj || // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\n\n\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/fbjs/lib/createArrayFromMixed.js"],"names":["toArray","require","hasArrayNature","obj","nodeType","Array","isArray","createArrayFromMixed","slice","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;AAEA;;;;;;;;;;;;;;;;;AAeA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,SACE;AACA,KAAC,CAACA,GAAF,MACA;AACA,WAAOA,GAAP,IAAc,QAAd,IAA0B,OAAOA,GAAP,IAAc,UAFxC,KAGA;AACA,gBAAYA,GAJZ,IAKA;AACA,MAAE,iBAAiBA,GAAnB,CANA,IAOA;AACA;AACA,WAAOA,GAAG,CAACC,QAAX,IAAuB,QATvB,MAUA;AACAC,IAAAA,KAAK,CAACC,OAAN,CAAcH,GAAd,KACA;AACA,gBAAYA,GAFZ,IAGA;AACA,cAAUA,GAfV;AAFF;AAmBD;AAED;;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASI,oBAAT,CAA8BJ,GAA9B,EAAmC;AACjC,MAAI,CAACD,cAAc,CAACC,GAAD,CAAnB,EAA0B;AACxB,WAAO,CAACA,GAAD,CAAP;AACD,GAFD,MAEO,IAAIE,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAJ,EAAwB;AAC7B,WAAOA,GAAG,CAACK,KAAJ,EAAP;AACD,GAFM,MAEA;AACL,WAAOR,OAAO,CAACG,GAAD,CAAd;AACD;AACF;;AAEDM,MAAM,CAACC,OAAP,GAAiBH,oBAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createArrayFromMixed\n * @typechecks\n */\n\n'use strict';\n\nvar toArray = require('./toArray');\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return(\n    // not null/false\n    !!obj && (\n    // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    'length' in obj &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && (\n    // a real array\n    Array.isArray(obj) ||\n    // arguments\n    'callee' in obj ||\n    // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;"]},"metadata":{},"sourceType":"script"}