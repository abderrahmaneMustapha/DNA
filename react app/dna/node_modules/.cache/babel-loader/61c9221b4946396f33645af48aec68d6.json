{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM\n   * attribute namespace URL. (Attribute names not specified use no namespace.)\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Injection = DOMPropertyInjection;\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n\n    for (var propName in Properties) {\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' + '\\'%s\\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;\n      var lowerCased = propName.toLowerCase();\n      var propConfig = Properties[propName];\n      var propertyInfo = {\n        attributeName: lowerCased,\n        attributeNamespace: null,\n        propertyName: propName,\n        mutationMethod: null,\n        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),\n        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)\n      };\n      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;\n\n      if (process.env.NODE_ENV !== 'production') {\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;\n      }\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        propertyInfo.attributeName = attributeName;\n\n        if (process.env.NODE_ENV !== 'production') {\n          DOMProperty.getPossibleStandardName[attributeName] = propName;\n        }\n      }\n\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];\n      }\n\n      if (DOMPropertyNames.hasOwnProperty(propName)) {\n        propertyInfo.propertyName = DOMPropertyNames[propName];\n      }\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];\n      }\n\n      DOMProperty.properties[propName] = propertyInfo;\n    }\n  }\n};\nvar defaultValueCache = {};\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\n\nvar DOMProperty = {\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Map from property \"standard name\" to an object with info about how to set\n   * the property in the DOM. Each object contains:\n   *\n   * attributeName:\n   *   Used when rendering markup or with `*Attribute()`.\n   * attributeNamespace\n   * propertyName:\n   *   Used on DOM node instances. (This includes properties that mutate due to\n   *   external factors.)\n   * mutationMethod:\n   *   If non-null, used instead of the property or `setAttribute()` after\n   *   initial render.\n   * mustUseAttribute:\n   *   Whether the property must be accessed and mutated using `*Attribute()`.\n   *   (This includes anything that fails `<propName> in <element>`.)\n   * mustUseProperty:\n   *   Whether the property must be accessed and mutated as an object property.\n   * hasSideEffects:\n   *   Whether or not setting a value causes side effects such as triggering\n   *   resources to be loaded or text selection changes. If true, we read from\n   *   the DOM before updating to ensure that the value is only set if it has\n   *   changed.\n   * hasBooleanValue:\n   *   Whether the property should be removed when set to a falsey value.\n   * hasNumericValue:\n   *   Whether the property must be numeric or parse as a numeric and should be\n   *   removed when set to a falsey value.\n   * hasPositiveNumericValue:\n   *   Whether the property must be positive numeric or parse as a positive\n   *   numeric and should be removed when set to a falsey value.\n   * hasOverloadedBooleanValue:\n   *   Whether the property can be used as a flag as well as with a value.\n   *   Removed when strictly equal to false; present without a value when\n   *   strictly equal to true; present with a value otherwise.\n   */\n  properties: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties. Available only in __DEV__.\n   * @type {Object}\n   */\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function (nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n\n    return nodeDefaults[prop];\n  },\n  injection: DOMPropertyInjection\n};\nmodule.exports = DOMProperty;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/DOMProperty.js"],"names":["invariant","require","checkMask","value","bitmask","DOMPropertyInjection","MUST_USE_ATTRIBUTE","MUST_USE_PROPERTY","HAS_SIDE_EFFECTS","HAS_BOOLEAN_VALUE","HAS_NUMERIC_VALUE","HAS_POSITIVE_NUMERIC_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","injectDOMPropertyConfig","domPropertyConfig","Injection","Properties","DOMAttributeNamespaces","DOMAttributeNames","DOMPropertyNames","DOMMutationMethods","isCustomAttribute","DOMProperty","_isCustomAttributeFunctions","push","propName","properties","hasOwnProperty","process","env","NODE_ENV","undefined","lowerCased","toLowerCase","propConfig","propertyInfo","attributeName","attributeNamespace","propertyName","mutationMethod","mustUseAttribute","mustUseProperty","hasSideEffects","hasBooleanValue","hasNumericValue","hasPositiveNumericValue","hasOverloadedBooleanValue","getPossibleStandardName","defaultValueCache","ID_ATTRIBUTE_NAME","i","length","isCustomAttributeFn","getDefaultValueForProperty","nodeName","prop","nodeDefaults","testElement","document","createElement","injection","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM\n   * attribute namespace URL. (Attribute names not specified use no namespace.)\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Injection = DOMPropertyInjection;\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n\n    for (var propName in Properties) {\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' + '\\'%s\\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;\n\n      var lowerCased = propName.toLowerCase();\n      var propConfig = Properties[propName];\n\n      var propertyInfo = {\n        attributeName: lowerCased,\n        attributeNamespace: null,\n        propertyName: propName,\n        mutationMethod: null,\n\n        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),\n        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)\n      };\n\n      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;\n\n      if (process.env.NODE_ENV !== 'production') {\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;\n      }\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        propertyInfo.attributeName = attributeName;\n        if (process.env.NODE_ENV !== 'production') {\n          DOMProperty.getPossibleStandardName[attributeName] = propName;\n        }\n      }\n\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];\n      }\n\n      if (DOMPropertyNames.hasOwnProperty(propName)) {\n        propertyInfo.propertyName = DOMPropertyNames[propName];\n      }\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];\n      }\n\n      DOMProperty.properties[propName] = propertyInfo;\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Map from property \"standard name\" to an object with info about how to set\n   * the property in the DOM. Each object contains:\n   *\n   * attributeName:\n   *   Used when rendering markup or with `*Attribute()`.\n   * attributeNamespace\n   * propertyName:\n   *   Used on DOM node instances. (This includes properties that mutate due to\n   *   external factors.)\n   * mutationMethod:\n   *   If non-null, used instead of the property or `setAttribute()` after\n   *   initial render.\n   * mustUseAttribute:\n   *   Whether the property must be accessed and mutated using `*Attribute()`.\n   *   (This includes anything that fails `<propName> in <element>`.)\n   * mustUseProperty:\n   *   Whether the property must be accessed and mutated as an object property.\n   * hasSideEffects:\n   *   Whether or not setting a value causes side effects such as triggering\n   *   resources to be loaded or text selection changes. If true, we read from\n   *   the DOM before updating to ensure that the value is only set if it has\n   *   changed.\n   * hasBooleanValue:\n   *   Whether the property should be removed when set to a falsey value.\n   * hasNumericValue:\n   *   Whether the property must be numeric or parse as a numeric and should be\n   *   removed when set to a falsey value.\n   * hasPositiveNumericValue:\n   *   Whether the property must be positive numeric or parse as a positive\n   *   numeric and should be removed when set to a falsey value.\n   * hasOverloadedBooleanValue:\n   *   Whether the property can be used as a flag as well as with a value.\n   *   Removed when strictly equal to false; present without a value when\n   *   strictly equal to true; present with a value otherwise.\n   */\n  properties: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties. Available only in __DEV__.\n   * @type {Object}\n   */\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function (nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;"]},"metadata":{},"sourceType":"script"}