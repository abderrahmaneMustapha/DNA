{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n'use strict';\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\n\nvar EventPluginUtils = require('./EventPluginUtils');\n\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\n\nvar forEachAccumulated = require('./forEachAccumulated');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar warning = require('fbjs/lib/warning');\n/**\n * Internal store for event listeners\n */\n\n\nvar listenerBank = {};\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\n\nvar eventQueue = null;\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\n\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\n\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\n\n\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;\n}\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\n\n\nvar EventPluginHub = {\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n    },\n    getInstanceHandle: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n  },\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(id, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(id, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName]; // TODO: This should never be null -- when is it?\n\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      if (!listenerBank[registrationName][id]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(id, registrationName);\n      }\n\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined; // This would be a good time to rethrow if any of the event handlers threw.\n\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n};\nmodule.exports = EventPluginHub;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/EventPluginHub.js"],"names":["EventPluginRegistry","require","EventPluginUtils","ReactErrorUtils","accumulateInto","forEachAccumulated","invariant","warning","listenerBank","eventQueue","executeDispatchesAndRelease","event","simulated","executeDispatchesInOrder","isPersistent","constructor","release","executeDispatchesAndReleaseSimulated","e","executeDispatchesAndReleaseTopLevel","InstanceHandle","validateInstanceHandle","valid","traverseTwoPhase","traverseEnterLeave","process","env","NODE_ENV","undefined","EventPluginHub","injection","injectMount","injectInstanceHandle","InjectedInstanceHandle","getInstanceHandle","injectEventPluginOrder","injectEventPluginsByName","eventNameDispatchConfigs","registrationNameModules","putListener","id","registrationName","listener","bankForRegistrationName","PluginModule","didPutListener","getListener","deleteListener","willDeleteListener","deleteAllListeners","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","nativeEvent","nativeEventTarget","events","plugins","i","length","possiblePlugin","extractedEvents","enqueueEvents","processEventQueue","processingEventQueue","rethrowCaughtError","__purge","__getListenerBank","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;\n\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(id, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(id, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName];\n    // TODO: This should never be null -- when is it?\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      if (!listenerBank[registrationName][id]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(id, registrationName);\n      }\n\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;\n    // This would be a good time to rethrow if any of the event handlers threw.\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;"]},"metadata":{},"sourceType":"script"}