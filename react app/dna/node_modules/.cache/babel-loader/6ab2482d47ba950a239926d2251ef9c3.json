{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconciler\n */\n'use strict';\n\nvar ReactRef = require('./ReactRef');\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\n\n\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (internalInstance, rootID, transaction, context) {\n    var markup = internalInstance.mountComponent(rootID, transaction, context);\n\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (internalInstance) {\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent();\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && context === internalInstance._context) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n      // TODO: Bailing out early is just a perf optimization right?\n      // TODO: Removing the return statement should affect correctness?\n      return;\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (internalInstance, transaction) {\n    internalInstance.performUpdateIfNecessary(transaction);\n  }\n};\nmodule.exports = ReactReconciler;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/ReactReconciler.js"],"names":["ReactRef","require","attachRefs","_currentElement","ReactReconciler","mountComponent","internalInstance","rootID","transaction","context","markup","ref","getReactMountReady","enqueue","unmountComponent","detachRefs","receiveComponent","nextElement","prevElement","_context","refsChanged","shouldUpdateRefs","performUpdateIfNecessary","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;AAEA;;;;;;AAIA,SAASC,UAAT,GAAsB;AACpBF,EAAAA,QAAQ,CAACE,UAAT,CAAoB,IAApB,EAA0B,KAAKC,eAA/B;AACD;;AAED,IAAIC,eAAe,GAAG;AAEpB;;;;;;;;;;AAUAC,EAAAA,cAAc,EAAE,UAAUC,gBAAV,EAA4BC,MAA5B,EAAoCC,WAApC,EAAiDC,OAAjD,EAA0D;AACxE,QAAIC,MAAM,GAAGJ,gBAAgB,CAACD,cAAjB,CAAgCE,MAAhC,EAAwCC,WAAxC,EAAqDC,OAArD,CAAb;;AACA,QAAIH,gBAAgB,CAACH,eAAjB,IAAoCG,gBAAgB,CAACH,eAAjB,CAAiCQ,GAAjC,IAAwC,IAAhF,EAAsF;AACpFH,MAAAA,WAAW,CAACI,kBAAZ,GAAiCC,OAAjC,CAAyCX,UAAzC,EAAqDI,gBAArD;AACD;;AACD,WAAOI,MAAP;AACD,GAlBmB;;AAoBpB;;;;;;AAMAI,EAAAA,gBAAgB,EAAE,UAAUR,gBAAV,EAA4B;AAC5CN,IAAAA,QAAQ,CAACe,UAAT,CAAoBT,gBAApB,EAAsCA,gBAAgB,CAACH,eAAvD;AACAG,IAAAA,gBAAgB,CAACQ,gBAAjB;AACD,GA7BmB;;AA+BpB;;;;;;;;;AASAE,EAAAA,gBAAgB,EAAE,UAAUV,gBAAV,EAA4BW,WAA5B,EAAyCT,WAAzC,EAAsDC,OAAtD,EAA+D;AAC/E,QAAIS,WAAW,GAAGZ,gBAAgB,CAACH,eAAnC;;AAEA,QAAIc,WAAW,KAAKC,WAAhB,IAA+BT,OAAO,KAAKH,gBAAgB,CAACa,QAAhE,EAA0E;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD;;AAED,QAAIC,WAAW,GAAGpB,QAAQ,CAACqB,gBAAT,CAA0BH,WAA1B,EAAuCD,WAAvC,CAAlB;;AAEA,QAAIG,WAAJ,EAAiB;AACfpB,MAAAA,QAAQ,CAACe,UAAT,CAAoBT,gBAApB,EAAsCY,WAAtC;AACD;;AAEDZ,IAAAA,gBAAgB,CAACU,gBAAjB,CAAkCC,WAAlC,EAA+CT,WAA/C,EAA4DC,OAA5D;;AAEA,QAAIW,WAAW,IAAId,gBAAgB,CAACH,eAAhC,IAAmDG,gBAAgB,CAACH,eAAjB,CAAiCQ,GAAjC,IAAwC,IAA/F,EAAqG;AACnGH,MAAAA,WAAW,CAACI,kBAAZ,GAAiCC,OAAjC,CAAyCX,UAAzC,EAAqDI,gBAArD;AACD;AACF,GApEmB;;AAsEpB;;;;;;;AAOAgB,EAAAA,wBAAwB,EAAE,UAAUhB,gBAAV,EAA4BE,WAA5B,EAAyC;AACjEF,IAAAA,gBAAgB,CAACgB,wBAAjB,CAA0Cd,WAA1C;AACD;AA/EmB,CAAtB;AAmFAe,MAAM,CAACC,OAAP,GAAiBpB,eAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconciler\n */\n\n'use strict';\n\nvar ReactRef = require('./ReactRef');\n\n/**\n * Helper to call ReactRef.attachRefs with this composite component, split out\n * to avoid allocations in the transaction mount-ready queue.\n */\nfunction attachRefs() {\n  ReactRef.attachRefs(this, this._currentElement);\n}\n\nvar ReactReconciler = {\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: function (internalInstance, rootID, transaction, context) {\n    var markup = internalInstance.mountComponent(rootID, transaction, context);\n    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n    return markup;\n  },\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function (internalInstance) {\n    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);\n    internalInstance.unmountComponent();\n  },\n\n  /**\n   * Update a component using a new element.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactElement} nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} context\n   * @internal\n   */\n  receiveComponent: function (internalInstance, nextElement, transaction, context) {\n    var prevElement = internalInstance._currentElement;\n\n    if (nextElement === prevElement && context === internalInstance._context) {\n      // Since elements are immutable after the owner is rendered,\n      // we can do a cheap identity compare here to determine if this is a\n      // superfluous reconcile. It's possible for state to be mutable but such\n      // change should trigger an update of the owner which would recreate\n      // the element. We explicitly check for the existence of an owner since\n      // it's possible for an element created outside a composite to be\n      // deeply mutated and reused.\n\n      // TODO: Bailing out early is just a perf optimization right?\n      // TODO: Removing the return statement should affect correctness?\n      return;\n    }\n\n    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);\n\n    if (refsChanged) {\n      ReactRef.detachRefs(internalInstance, prevElement);\n    }\n\n    internalInstance.receiveComponent(nextElement, transaction, context);\n\n    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {\n      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);\n    }\n  },\n\n  /**\n   * Flush any dirty changes in a component.\n   *\n   * @param {ReactComponent} internalInstance\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  performUpdateIfNecessary: function (internalInstance, transaction) {\n    internalInstance.performUpdateIfNecessary(transaction);\n  }\n\n};\n\nmodule.exports = ReactReconciler;"]},"metadata":{},"sourceType":"script"}