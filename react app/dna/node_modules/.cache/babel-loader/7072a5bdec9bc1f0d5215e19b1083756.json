{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nexport var styles = nativeSelectStyles;\n\nvar _ref = React.createElement(Input, null);\n\nvar _ref2 = React.createElement(FilledInput, null);\n\nvar Select = React.forwardRef(function Select(props, ref) {\n  var _props$autoWidth = props.autoWidth,\n      autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,\n      children = props.children,\n      classes = props.classes,\n      _props$displayEmpty = props.displayEmpty,\n      displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,\n      _props$IconComponent = props.IconComponent,\n      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,\n      id = props.id,\n      input = props.input,\n      inputProps = props.inputProps,\n      labelId = props.labelId,\n      _props$labelWidth = props.labelWidth,\n      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,\n      MenuProps = props.MenuProps,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$native = props.native,\n      native = _props$native === void 0 ? false : _props$native,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      renderValue = props.renderValue,\n      SelectDisplayProps = props.SelectDisplayProps,\n      _props$variant = props.variant,\n      variantProps = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"labelId\", \"labelWidth\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  var inputComponent = native ? NativeSelectInput : SelectInput;\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  var variant = fcs.variant || variantProps;\n  var InputComponent = input || {\n    standard: _ref,\n    outlined: React.createElement(OutlinedInput, {\n      labelWidth: labelWidth\n    }),\n    filled: _ref2\n  }[variant];\n  return React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: inputComponent,\n    inputProps: _extends({\n      children: children,\n      IconComponent: IconComponent,\n      variant: variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple: multiple\n    }, native ? {\n      id: id\n    } : {\n      autoWidth: autoWidth,\n      displayEmpty: displayEmpty,\n      labelId: labelId,\n      MenuProps: MenuProps,\n      onClose: onClose,\n      onOpen: onOpen,\n      open: open,\n      renderValue: renderValue,\n      SelectDisplayProps: _extends({\n        id: id\n      }, SelectDisplayProps)\n    }, {}, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The default element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * The idea of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * The label width to be used on OutlinedInput.\n   * This prop is required when the `variant` prop is `outlined`.\n   */\n  labelWidth: PropTypes.number,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The input value. Providing an empty string will select no options.\n   * This prop is required when the `native` prop is `false` (default).\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(Select);","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/@material-ui/core/esm/Select/Select.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","mergeClasses","SelectInput","formControlState","useFormControl","withStyles","ArrowDropDownIcon","Input","styles","nativeSelectStyles","NativeSelectInput","FilledInput","OutlinedInput","_ref","createElement","_ref2","Select","forwardRef","props","ref","_props$autoWidth","autoWidth","children","classes","_props$displayEmpty","displayEmpty","_props$IconComponent","IconComponent","id","input","inputProps","labelId","_props$labelWidth","labelWidth","MenuProps","_props$multiple","multiple","_props$native","native","onClose","onOpen","open","renderValue","SelectDisplayProps","_props$variant","variant","variantProps","other","inputComponent","muiFormControl","fcs","states","InputComponent","standard","outlined","filled","cloneElement","type","undefined","baseClasses","newClasses","Component","process","env","NODE_ENV","propTypes","bool","node","object","isRequired","defaultValue","any","elementType","string","element","number","onChange","func","value","oneOf","muiName","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { mergeClasses } from '@material-ui/styles';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport { styles as nativeSelectStyles } from '../NativeSelect/NativeSelect';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nexport var styles = nativeSelectStyles;\n\nvar _ref = React.createElement(Input, null);\n\nvar _ref2 = React.createElement(FilledInput, null);\n\nvar Select = React.forwardRef(function Select(props, ref) {\n  var _props$autoWidth = props.autoWidth,\n      autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,\n      children = props.children,\n      classes = props.classes,\n      _props$displayEmpty = props.displayEmpty,\n      displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,\n      _props$IconComponent = props.IconComponent,\n      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,\n      id = props.id,\n      input = props.input,\n      inputProps = props.inputProps,\n      labelId = props.labelId,\n      _props$labelWidth = props.labelWidth,\n      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,\n      MenuProps = props.MenuProps,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$native = props.native,\n      native = _props$native === void 0 ? false : _props$native,\n      onClose = props.onClose,\n      onOpen = props.onOpen,\n      open = props.open,\n      renderValue = props.renderValue,\n      SelectDisplayProps = props.SelectDisplayProps,\n      _props$variant = props.variant,\n      variantProps = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"autoWidth\", \"children\", \"classes\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"labelId\", \"labelWidth\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"]);\n\n  var inputComponent = native ? NativeSelectInput : SelectInput;\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['variant']\n  });\n  var variant = fcs.variant || variantProps;\n  var InputComponent = input || {\n    standard: _ref,\n    outlined: React.createElement(OutlinedInput, {\n      labelWidth: labelWidth\n    }),\n    filled: _ref2\n  }[variant];\n  return React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: inputComponent,\n    inputProps: _extends({\n      children: children,\n      IconComponent: IconComponent,\n      variant: variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple: multiple\n    }, native ? {\n      id: id\n    } : {\n      autoWidth: autoWidth,\n      displayEmpty: displayEmpty,\n      labelId: labelId,\n      MenuProps: MenuProps,\n      onClose: onClose,\n      onOpen: onOpen,\n      open: open,\n      renderValue: renderValue,\n      SelectDisplayProps: _extends({\n        id: id\n      }, SelectDisplayProps)\n    }, {}, inputProps, {\n      classes: inputProps ? mergeClasses({\n        baseClasses: classes,\n        newClasses: inputProps.classes,\n        Component: Select\n      }) : classes\n    }, input ? input.props.inputProps : {}),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes = {\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The default element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\n   * The icon that displays the arrow.\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input: PropTypes.element,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * The idea of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId: PropTypes.string,\n\n  /**\n   * The label width to be used on OutlinedInput.\n   * This prop is required when the `variant` prop is `outlined`.\n   */\n  labelWidth: PropTypes.number,\n\n  /**\n   * Props applied to the [`Menu`](/api/menu/) element.\n   */\n  MenuProps: PropTypes.object,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * If `true`, the component will be using a native `select` element.\n   */\n  native: PropTypes.bool,\n\n  /**\n   * Callback function fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control `select` open state.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue: PropTypes.func,\n\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\n   * The input value. Providing an empty string will select no options.\n   * This prop is required when the `native` prop is `false` (default).\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default withStyles(styles, {\n  name: 'MuiSelect'\n})(Select);"]},"metadata":{},"sourceType":"module"}