{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Popper from '@material-ui/core/Popper';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chip from '@material-ui/core/Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport var styles = function styles(theme) {\n  var _option;\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&:hover $clearIndicatorDirty, &$focused $clearIndicatorDirty': {\n        visibility: 'visible'\n      }\n    },\n\n    /* Pseudo-class applied to the root element if focused. */\n    focused: {},\n\n    /* Styles applied to the tag elements, e.g. the chips. */\n    tag: {\n      margin: 3,\n      maxWidth: 'calc(100% - 6px)'\n    },\n\n    /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n    tagSizeSmall: {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    },\n\n    /* Styles applied to the Input element. */\n    inputRoot: {\n      flexWrap: 'wrap',\n      paddingRight: 62,\n      '& $input': {\n        width: 0,\n        minWidth: 30\n      },\n      '&[class*=\"MuiInput-root\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: 4\n        },\n        '& $input:first-child': {\n          padding: '6px 0'\n        }\n      },\n      '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n        '& $input': {\n          padding: '4px 4px 5px'\n        },\n        '& $input:first-child': {\n          padding: '3px 0 6px'\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"]': {\n        padding: 9,\n        paddingRight: 62,\n        '& $input': {\n          padding: '9.5px 4px'\n        },\n        '& $input:first-child': {\n          paddingLeft: 6\n        },\n        '& $endAdornment': {\n          right: 7\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n        padding: 6,\n        paddingRight: 62,\n        '& $input': {\n          padding: '4.5px 4px'\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"]': {\n        paddingTop: 19,\n        paddingLeft: 8,\n        '& $input': {\n          padding: '9px 4px'\n        },\n        '& $endAdornment': {\n          right: 7\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: '4.5px 4px'\n        }\n      }\n    },\n\n    /* Styles applied to the input element. */\n    input: {\n      flexGrow: 1,\n      textOverflow: 'ellipsis',\n      opacity: 0\n    },\n\n    /* Styles applied to the input element if tag focused. */\n    inputFocused: {\n      opacity: 1\n    },\n\n    /* Styles applied to the endAdornment element. */\n    endAdornment: {\n      // We use a position absolute to support wrapping tags.\n      position: 'absolute',\n      right: 0,\n      top: 'calc(50% - 14px)' // Center vertically\n\n    },\n\n    /* Styles applied to the clear indictator. */\n    clearIndicator: {\n      marginRight: -2,\n      padding: 4,\n      color: theme.palette.action.active,\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the clear indictator if the input is dirty. */\n    clearIndicatorDirty: {},\n\n    /* Styles applied to the popup indictator. */\n    popupIndicator: {\n      padding: 2,\n      marginRight: -2,\n      color: theme.palette.action.active\n    },\n\n    /* Styles applied to the popup indictator if the popup is open. */\n    popupIndicatorOpen: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the popper element. */\n    popper: {\n      zIndex: theme.zIndex.modal\n    },\n\n    /* Styles applied to the popper element if `disablePortal={true}`. */\n    popperDisablePortal: {\n      position: 'absolute'\n    },\n\n    /* Styles applied to the `Paper` component. */\n    paper: _extends({}, theme.typography.body1, {\n      overflow: 'hidden',\n      margin: '4px 0',\n      '& > ul': {\n        maxHeight: '40vh',\n        overflow: 'auto'\n      }\n    }),\n\n    /* Styles applied to the `listbox` component. */\n    listbox: {\n      listStyle: 'none',\n      margin: 0,\n      padding: '8px 0px',\n      position: 'relative'\n    },\n\n    /* Styles applied to the loading wrapper. */\n    loading: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the no option wrapper. */\n    noOptions: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the option elements. */\n    option: (_option = {\n      minHeight: 48,\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16\n    }, _defineProperty(_option, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    }), _defineProperty(_option, '&[aria-selected=\"true\"]', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[data-focus=\"true\"]', {\n      backgroundColor: theme.palette.action.hover\n    }), _defineProperty(_option, '&[aria-disabled=\"true\"]', {\n      opacity: 0.5,\n      pointerEvents: 'none'\n    }), _defineProperty(_option, '&:active', {\n      backgroundColor: theme.palette.action.selected\n    }), _option),\n\n    /* Styles applied to the group's label elements. */\n    groupLabel: {\n      backgroundColor: theme.palette.background.paper,\n      top: -8\n    },\n\n    /* Styles applied to the group's ul elements. */\n    groupUl: {\n      padding: 0\n    }\n  };\n};\n\nfunction DisablePortal(props) {\n  // eslint-disable-next-line react/prop-types\n  var anchorEl = props.anchorEl,\n      open = props.open,\n      other = _objectWithoutProperties(props, [\"anchorEl\", \"open\"]);\n\n  return React.createElement(\"div\", other);\n}\n\nvar _ref = React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = React.createElement(ArrowDropDownIcon, null);\n\nvar Autocomplete = React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable no-unused-vars */\n  var _props$autoComplete = props.autoComplete,\n      autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,\n      _props$autoHighlight = props.autoHighlight,\n      autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,\n      _props$autoSelect = props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,\n      _props$blurOnSelect = props.blurOnSelect,\n      blurOnSelect = _props$blurOnSelect === void 0 ? false : _props$blurOnSelect,\n      ChipProps = props.ChipProps,\n      classes = props.classes,\n      className = props.className,\n      _props$clearOnEscape = props.clearOnEscape,\n      clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,\n      _props$clearText = props.clearText,\n      clearText = _props$clearText === void 0 ? 'Clear' : _props$clearText,\n      _props$closeIcon = props.closeIcon,\n      closeIcon = _props$closeIcon === void 0 ? _ref : _props$closeIcon,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      _props$debug = props.debug,\n      debug = _props$debug === void 0 ? false : _props$debug,\n      defaultValue = props.defaultValue,\n      _props$disableClearab = props.disableClearable,\n      disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n      _props$disableCloseOn = props.disableCloseOnSelect,\n      disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$disableOpenOnF = props.disableOpenOnFocus,\n      disableOpenOnFocus = _props$disableOpenOnF === void 0 ? false : _props$disableOpenOnF,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      filterOptions = props.filterOptions,\n      _props$filterSelected = props.filterSelectedOptions,\n      filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,\n      _props$forcePopupIcon = props.forcePopupIcon,\n      forcePopupIcon = _props$forcePopupIcon === void 0 ? 'auto' : _props$forcePopupIcon,\n      _props$freeSolo = props.freeSolo,\n      freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n      getOptionDisabled = props.getOptionDisabled,\n      _props$getOptionLabel = props.getOptionLabel,\n      getOptionLabel = _props$getOptionLabel === void 0 ? function (x) {\n    return x;\n  } : _props$getOptionLabel,\n      getOptionSelected = props.getOptionSelected,\n      groupBy = props.groupBy,\n      idProp = props.id,\n      _props$includeInputIn = props.includeInputInList,\n      includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,\n      inputValueProp = props.inputValue,\n      _props$ListboxCompone = props.ListboxComponent,\n      ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,\n      ListboxProps = props.ListboxProps,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? false : _props$loading,\n      _props$loadingText = props.loadingText,\n      loadingText = _props$loadingText === void 0 ? 'Loading…' : _props$loadingText,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$noOptionsText = props.noOptionsText,\n      noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onInputChange = props.onInputChange,\n      onOpen = props.onOpen,\n      open = props.open,\n      _props$openText = props.openText,\n      openText = _props$openText === void 0 ? 'Open' : _props$openText,\n      _props$options = props.options,\n      options = _props$options === void 0 ? [] : _props$options,\n      _props$PaperComponent = props.PaperComponent,\n      PaperComponent = _props$PaperComponent === void 0 ? Paper : _props$PaperComponent,\n      _props$PopperComponen = props.PopperComponent,\n      PopperComponentProp = _props$PopperComponen === void 0 ? Popper : _props$PopperComponen,\n      _props$popupIcon = props.popupIcon,\n      popupIcon = _props$popupIcon === void 0 ? _ref2 : _props$popupIcon,\n      renderGroupProp = props.renderGroup,\n      renderInput = props.renderInput,\n      renderOptionProp = props.renderOption,\n      renderTags = props.renderTags,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      valueProp = props.value,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearOnEscape\", \"clearText\", \"closeIcon\", \"closeText\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disableListWrap\", \"disableOpenOnFocus\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"id\", \"includeInputInList\", \"inputValue\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onInputChange\", \"onOpen\", \"open\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"size\", \"value\"]);\n  /* eslint-enable no-unused-vars */\n\n\n  var PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n\n  var _useAutocomplete = useAutocomplete(props),\n      getRootProps = _useAutocomplete.getRootProps,\n      getInputProps = _useAutocomplete.getInputProps,\n      getInputLabelProps = _useAutocomplete.getInputLabelProps,\n      getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,\n      getClearProps = _useAutocomplete.getClearProps,\n      getTagProps = _useAutocomplete.getTagProps,\n      getListboxProps = _useAutocomplete.getListboxProps,\n      getOptionProps = _useAutocomplete.getOptionProps,\n      value = _useAutocomplete.value,\n      dirty = _useAutocomplete.dirty,\n      id = _useAutocomplete.id,\n      popupOpen = _useAutocomplete.popupOpen,\n      focused = _useAutocomplete.focused,\n      focusedTag = _useAutocomplete.focusedTag,\n      anchorEl = _useAutocomplete.anchorEl,\n      setAnchorEl = _useAutocomplete.setAnchorEl,\n      inputValue = _useAutocomplete.inputValue,\n      groupedOptions = _useAutocomplete.groupedOptions;\n\n  var startAdornment;\n\n  if (multiple && value.length > 0) {\n    var getCustomizedTagProps = function getCustomizedTagProps(params) {\n      return _extends({\n        className: clsx(classes.tag, {\n          small: classes.tagSizeSmall\n        }[size]),\n        disabled: disabled\n      }, getTagProps(params));\n    };\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map(function (option, index) {\n        return React.createElement(Chip, _extends({\n          label: getOptionLabel(option),\n          size: size\n        }, getCustomizedTagProps({\n          index: index\n        }), ChipProps));\n      });\n    }\n  }\n\n  var defaultRenderGroup = function defaultRenderGroup(params) {\n    return React.createElement(\"li\", {\n      key: params.key\n    }, React.createElement(ListSubheader, {\n      className: classes.groupLabel,\n      component: \"div\"\n    }, params.key), React.createElement(\"ul\", {\n      className: classes.groupUl\n    }, params.children));\n  };\n\n  var renderGroup = renderGroupProp || defaultRenderGroup;\n  var renderOption = renderOptionProp || getOptionLabel;\n\n  var renderListOption = function renderListOption(option, index) {\n    var optionProps = getOptionProps({\n      option: option,\n      index: index\n    });\n    return React.createElement(\"li\", _extends({}, optionProps, {\n      className: classes.option\n    }), renderOption(option, {\n      selected: optionProps['aria-selected'],\n      inputValue: inputValue\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused)\n  }, getRootProps(other)), renderInput({\n    id: id,\n    disabled: disabled,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment: startAdornment,\n      endAdornment: React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, disableClearable || disabled ? null : React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), closeIcon), (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false ? React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled: disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map(function (option, index) {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        children: option.options.map(function (option2, index2) {\n          return renderListOption(option2, option.index + index2);\n        })\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default close icon.\n   */\n  closeIcon: PropTypes.node,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * If `true`, the popup will ignore the blur event if the input if filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   */\n  debug: PropTypes.bool,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't open on input focus.\n   */\n  disableOpenOnFocus: PropTypes.bool,\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {any[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {any[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected.\n   * Uses strict equality by default.\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {any} options The option to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The component used to render the listbox.\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {any} value\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: \"input\" (user input), \"reset\" (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array,\n\n  /**\n   * The component used to render the body of the popup.\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {any} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {any} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * The size of the autocomplete.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/@material-ui/lab/esm/Autocomplete/Autocomplete.js"],"names":["_objectWithoutProperties","_defineProperty","_extends","React","PropTypes","clsx","withStyles","Popper","ListSubheader","Paper","IconButton","Chip","CloseIcon","ArrowDropDownIcon","useAutocomplete","createFilterOptions","styles","theme","_option","root","visibility","focused","tag","margin","maxWidth","tagSizeSmall","inputRoot","flexWrap","paddingRight","width","minWidth","paddingBottom","padding","paddingLeft","right","paddingTop","input","flexGrow","textOverflow","opacity","inputFocused","endAdornment","position","top","clearIndicator","marginRight","color","palette","action","active","clearIndicatorDirty","popupIndicator","popupIndicatorOpen","transform","popper","zIndex","modal","popperDisablePortal","paper","typography","body1","overflow","maxHeight","listbox","listStyle","loading","text","secondary","noOptions","option","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","selected","hover","pointerEvents","groupLabel","background","groupUl","DisablePortal","props","anchorEl","open","other","createElement","_ref","fontSize","_ref2","Autocomplete","forwardRef","ref","_props$autoComplete","autoComplete","_props$autoHighlight","autoHighlight","_props$autoSelect","autoSelect","_props$blurOnSelect","blurOnSelect","ChipProps","classes","className","_props$clearOnEscape","clearOnEscape","_props$clearText","clearText","_props$closeIcon","closeIcon","_props$closeText","closeText","_props$debug","debug","defaultValue","_props$disableClearab","disableClearable","_props$disableCloseOn","disableCloseOnSelect","_props$disabled","disabled","_props$disableListWra","disableListWrap","_props$disableOpenOnF","disableOpenOnFocus","_props$disablePortal","disablePortal","filterOptions","_props$filterSelected","filterSelectedOptions","_props$forcePopupIcon","forcePopupIcon","_props$freeSolo","freeSolo","getOptionDisabled","_props$getOptionLabel","getOptionLabel","x","getOptionSelected","groupBy","idProp","id","_props$includeInputIn","includeInputInList","inputValueProp","inputValue","_props$ListboxCompone","ListboxComponent","ListboxProps","_props$loading","_props$loadingText","loadingText","_props$multiple","multiple","_props$noOptionsText","noOptionsText","onChange","onClose","onInputChange","onOpen","_props$openText","openText","_props$options","options","_props$PaperComponent","PaperComponent","_props$PopperComponen","PopperComponent","PopperComponentProp","_props$popupIcon","popupIcon","renderGroupProp","renderGroup","renderInput","renderOptionProp","renderOption","renderTags","_props$size","size","valueProp","value","_useAutocomplete","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","dirty","popupOpen","focusedTag","setAnchorEl","groupedOptions","startAdornment","length","getCustomizedTagProps","params","small","map","index","label","defaultRenderGroup","key","component","children","renderListOption","optionProps","Fragment","undefined","InputLabelProps","InputProps","title","inputProps","style","clientWidth","role","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","any","func","elementType","array","isRequired","name"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Popper from '@material-ui/core/Popper';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chip from '@material-ui/core/Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport var styles = function styles(theme) {\n  var _option;\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&:hover $clearIndicatorDirty, &$focused $clearIndicatorDirty': {\n        visibility: 'visible'\n      }\n    },\n\n    /* Pseudo-class applied to the root element if focused. */\n    focused: {},\n\n    /* Styles applied to the tag elements, e.g. the chips. */\n    tag: {\n      margin: 3,\n      maxWidth: 'calc(100% - 6px)'\n    },\n\n    /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n    tagSizeSmall: {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    },\n\n    /* Styles applied to the Input element. */\n    inputRoot: {\n      flexWrap: 'wrap',\n      paddingRight: 62,\n      '& $input': {\n        width: 0,\n        minWidth: 30\n      },\n      '&[class*=\"MuiInput-root\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: 4\n        },\n        '& $input:first-child': {\n          padding: '6px 0'\n        }\n      },\n      '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n        '& $input': {\n          padding: '4px 4px 5px'\n        },\n        '& $input:first-child': {\n          padding: '3px 0 6px'\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"]': {\n        padding: 9,\n        paddingRight: 62,\n        '& $input': {\n          padding: '9.5px 4px'\n        },\n        '& $input:first-child': {\n          paddingLeft: 6\n        },\n        '& $endAdornment': {\n          right: 7\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n        padding: 6,\n        paddingRight: 62,\n        '& $input': {\n          padding: '4.5px 4px'\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"]': {\n        paddingTop: 19,\n        paddingLeft: 8,\n        '& $input': {\n          padding: '9px 4px'\n        },\n        '& $endAdornment': {\n          right: 7\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: '4.5px 4px'\n        }\n      }\n    },\n\n    /* Styles applied to the input element. */\n    input: {\n      flexGrow: 1,\n      textOverflow: 'ellipsis',\n      opacity: 0\n    },\n\n    /* Styles applied to the input element if tag focused. */\n    inputFocused: {\n      opacity: 1\n    },\n\n    /* Styles applied to the endAdornment element. */\n    endAdornment: {\n      // We use a position absolute to support wrapping tags.\n      position: 'absolute',\n      right: 0,\n      top: 'calc(50% - 14px)' // Center vertically\n\n    },\n\n    /* Styles applied to the clear indictator. */\n    clearIndicator: {\n      marginRight: -2,\n      padding: 4,\n      color: theme.palette.action.active,\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the clear indictator if the input is dirty. */\n    clearIndicatorDirty: {},\n\n    /* Styles applied to the popup indictator. */\n    popupIndicator: {\n      padding: 2,\n      marginRight: -2,\n      color: theme.palette.action.active\n    },\n\n    /* Styles applied to the popup indictator if the popup is open. */\n    popupIndicatorOpen: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the popper element. */\n    popper: {\n      zIndex: theme.zIndex.modal\n    },\n\n    /* Styles applied to the popper element if `disablePortal={true}`. */\n    popperDisablePortal: {\n      position: 'absolute'\n    },\n\n    /* Styles applied to the `Paper` component. */\n    paper: _extends({}, theme.typography.body1, {\n      overflow: 'hidden',\n      margin: '4px 0',\n      '& > ul': {\n        maxHeight: '40vh',\n        overflow: 'auto'\n      }\n    }),\n\n    /* Styles applied to the `listbox` component. */\n    listbox: {\n      listStyle: 'none',\n      margin: 0,\n      padding: '8px 0px',\n      position: 'relative'\n    },\n\n    /* Styles applied to the loading wrapper. */\n    loading: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the no option wrapper. */\n    noOptions: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the option elements. */\n    option: (_option = {\n      minHeight: 48,\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16\n    }, _defineProperty(_option, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    }), _defineProperty(_option, '&[aria-selected=\"true\"]', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[data-focus=\"true\"]', {\n      backgroundColor: theme.palette.action.hover\n    }), _defineProperty(_option, '&[aria-disabled=\"true\"]', {\n      opacity: 0.5,\n      pointerEvents: 'none'\n    }), _defineProperty(_option, '&:active', {\n      backgroundColor: theme.palette.action.selected\n    }), _option),\n\n    /* Styles applied to the group's label elements. */\n    groupLabel: {\n      backgroundColor: theme.palette.background.paper,\n      top: -8\n    },\n\n    /* Styles applied to the group's ul elements. */\n    groupUl: {\n      padding: 0\n    }\n  };\n};\n\nfunction DisablePortal(props) {\n  // eslint-disable-next-line react/prop-types\n  var anchorEl = props.anchorEl,\n      open = props.open,\n      other = _objectWithoutProperties(props, [\"anchorEl\", \"open\"]);\n\n  return React.createElement(\"div\", other);\n}\n\nvar _ref = React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = React.createElement(ArrowDropDownIcon, null);\n\nvar Autocomplete = React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable no-unused-vars */\n  var _props$autoComplete = props.autoComplete,\n      autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,\n      _props$autoHighlight = props.autoHighlight,\n      autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,\n      _props$autoSelect = props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,\n      _props$blurOnSelect = props.blurOnSelect,\n      blurOnSelect = _props$blurOnSelect === void 0 ? false : _props$blurOnSelect,\n      ChipProps = props.ChipProps,\n      classes = props.classes,\n      className = props.className,\n      _props$clearOnEscape = props.clearOnEscape,\n      clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,\n      _props$clearText = props.clearText,\n      clearText = _props$clearText === void 0 ? 'Clear' : _props$clearText,\n      _props$closeIcon = props.closeIcon,\n      closeIcon = _props$closeIcon === void 0 ? _ref : _props$closeIcon,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      _props$debug = props.debug,\n      debug = _props$debug === void 0 ? false : _props$debug,\n      defaultValue = props.defaultValue,\n      _props$disableClearab = props.disableClearable,\n      disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n      _props$disableCloseOn = props.disableCloseOnSelect,\n      disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$disableOpenOnF = props.disableOpenOnFocus,\n      disableOpenOnFocus = _props$disableOpenOnF === void 0 ? false : _props$disableOpenOnF,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      filterOptions = props.filterOptions,\n      _props$filterSelected = props.filterSelectedOptions,\n      filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,\n      _props$forcePopupIcon = props.forcePopupIcon,\n      forcePopupIcon = _props$forcePopupIcon === void 0 ? 'auto' : _props$forcePopupIcon,\n      _props$freeSolo = props.freeSolo,\n      freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n      getOptionDisabled = props.getOptionDisabled,\n      _props$getOptionLabel = props.getOptionLabel,\n      getOptionLabel = _props$getOptionLabel === void 0 ? function (x) {\n    return x;\n  } : _props$getOptionLabel,\n      getOptionSelected = props.getOptionSelected,\n      groupBy = props.groupBy,\n      idProp = props.id,\n      _props$includeInputIn = props.includeInputInList,\n      includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,\n      inputValueProp = props.inputValue,\n      _props$ListboxCompone = props.ListboxComponent,\n      ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,\n      ListboxProps = props.ListboxProps,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? false : _props$loading,\n      _props$loadingText = props.loadingText,\n      loadingText = _props$loadingText === void 0 ? 'Loading…' : _props$loadingText,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$noOptionsText = props.noOptionsText,\n      noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onInputChange = props.onInputChange,\n      onOpen = props.onOpen,\n      open = props.open,\n      _props$openText = props.openText,\n      openText = _props$openText === void 0 ? 'Open' : _props$openText,\n      _props$options = props.options,\n      options = _props$options === void 0 ? [] : _props$options,\n      _props$PaperComponent = props.PaperComponent,\n      PaperComponent = _props$PaperComponent === void 0 ? Paper : _props$PaperComponent,\n      _props$PopperComponen = props.PopperComponent,\n      PopperComponentProp = _props$PopperComponen === void 0 ? Popper : _props$PopperComponen,\n      _props$popupIcon = props.popupIcon,\n      popupIcon = _props$popupIcon === void 0 ? _ref2 : _props$popupIcon,\n      renderGroupProp = props.renderGroup,\n      renderInput = props.renderInput,\n      renderOptionProp = props.renderOption,\n      renderTags = props.renderTags,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      valueProp = props.value,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearOnEscape\", \"clearText\", \"closeIcon\", \"closeText\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disableListWrap\", \"disableOpenOnFocus\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"id\", \"includeInputInList\", \"inputValue\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onInputChange\", \"onOpen\", \"open\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"size\", \"value\"]);\n  /* eslint-enable no-unused-vars */\n\n\n  var PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n\n  var _useAutocomplete = useAutocomplete(props),\n      getRootProps = _useAutocomplete.getRootProps,\n      getInputProps = _useAutocomplete.getInputProps,\n      getInputLabelProps = _useAutocomplete.getInputLabelProps,\n      getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,\n      getClearProps = _useAutocomplete.getClearProps,\n      getTagProps = _useAutocomplete.getTagProps,\n      getListboxProps = _useAutocomplete.getListboxProps,\n      getOptionProps = _useAutocomplete.getOptionProps,\n      value = _useAutocomplete.value,\n      dirty = _useAutocomplete.dirty,\n      id = _useAutocomplete.id,\n      popupOpen = _useAutocomplete.popupOpen,\n      focused = _useAutocomplete.focused,\n      focusedTag = _useAutocomplete.focusedTag,\n      anchorEl = _useAutocomplete.anchorEl,\n      setAnchorEl = _useAutocomplete.setAnchorEl,\n      inputValue = _useAutocomplete.inputValue,\n      groupedOptions = _useAutocomplete.groupedOptions;\n\n  var startAdornment;\n\n  if (multiple && value.length > 0) {\n    var getCustomizedTagProps = function getCustomizedTagProps(params) {\n      return _extends({\n        className: clsx(classes.tag, {\n          small: classes.tagSizeSmall\n        }[size]),\n        disabled: disabled\n      }, getTagProps(params));\n    };\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map(function (option, index) {\n        return React.createElement(Chip, _extends({\n          label: getOptionLabel(option),\n          size: size\n        }, getCustomizedTagProps({\n          index: index\n        }), ChipProps));\n      });\n    }\n  }\n\n  var defaultRenderGroup = function defaultRenderGroup(params) {\n    return React.createElement(\"li\", {\n      key: params.key\n    }, React.createElement(ListSubheader, {\n      className: classes.groupLabel,\n      component: \"div\"\n    }, params.key), React.createElement(\"ul\", {\n      className: classes.groupUl\n    }, params.children));\n  };\n\n  var renderGroup = renderGroupProp || defaultRenderGroup;\n  var renderOption = renderOptionProp || getOptionLabel;\n\n  var renderListOption = function renderListOption(option, index) {\n    var optionProps = getOptionProps({\n      option: option,\n      index: index\n    });\n    return React.createElement(\"li\", _extends({}, optionProps, {\n      className: classes.option\n    }), renderOption(option, {\n      selected: optionProps['aria-selected'],\n      inputValue: inputValue\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused)\n  }, getRootProps(other)), renderInput({\n    id: id,\n    disabled: disabled,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment: startAdornment,\n      endAdornment: React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, disableClearable || disabled ? null : React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), closeIcon), (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false ? React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled: disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map(function (option, index) {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        children: option.options.map(function (option2, index2) {\n          return renderListOption(option2, option.index + index2);\n        })\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default close icon.\n   */\n  closeIcon: PropTypes.node,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * If `true`, the popup will ignore the blur event if the input if filled.\n   * You can inspect the popup markup with your browser tools.\n   * Consider this option when you need to customize the component.\n   */\n  debug: PropTypes.bool,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't open on input focus.\n   */\n  disableOpenOnFocus: PropTypes.bool,\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {any[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {any[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected.\n   * Uses strict equality by default.\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {any} options The option to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The component used to render the listbox.\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {any} value\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: \"input\" (user input), \"reset\" (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array,\n\n  /**\n   * The component used to render the body of the popup.\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {any} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {any} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * The size of the autocomplete.\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);"]},"metadata":{},"sourceType":"module"}