{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\n\nvar getMarkupWrap = require('./getMarkupWrap');\n\nvar invariant = require('./invariant');\n/**\n * Dummy container used to render all markup.\n */\n\n\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n/**\n * Pattern used by `getNodeName`.\n */\n\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\n\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\n\n\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;\n  var nodeName = getNodeName(markup);\n  var wrap = nodeName && getMarkupWrap(nodeName);\n\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n    var wrapDepth = wrap[0];\n\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFromMixed(node.childNodes);\n\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/fbjs/lib/createNodesFromMarkup.js"],"names":["ExecutionEnvironment","require","createArrayFromMixed","getMarkupWrap","invariant","dummyNode","canUseDOM","document","createElement","nodeNamePattern","getNodeName","markup","nodeNameMatch","match","toLowerCase","createNodesFromMarkup","handleScript","node","process","env","NODE_ENV","undefined","nodeName","wrap","innerHTML","wrapDepth","lastChild","scripts","getElementsByTagName","length","forEach","nodes","childNodes","removeChild","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;AAEA;;AAEA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;AAGA,IAAII,SAAS,GAAGL,oBAAoB,CAACM,SAArB,GAAiCC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAjC,GAAiE,IAAjF;AAEA;;;;AAGA,IAAIC,eAAe,GAAG,YAAtB;AAEA;;;;;;;AAMA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,MAAIC,aAAa,GAAGD,MAAM,CAACE,KAAP,CAAaJ,eAAb,CAApB;AACA,SAAOG,aAAa,IAAIA,aAAa,CAAC,CAAD,CAAb,CAAiBE,WAAjB,EAAxB;AACD;AAED;;;;;;;;;;;;AAUA,SAASC,qBAAT,CAA+BJ,MAA/B,EAAuCK,YAAvC,EAAqD;AACnD,MAAIC,IAAI,GAAGZ,SAAX;AACA,GAAC,CAAC,CAACA,SAAH,GAAea,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,SAAS,CAAC,KAAD,EAAQ,6CAAR,CAAjD,GAA0GA,SAAS,CAAC,KAAD,CAAlI,GAA4IiB,SAA5I;AACA,MAAIC,QAAQ,GAAGZ,WAAW,CAACC,MAAD,CAA1B;AAEA,MAAIY,IAAI,GAAGD,QAAQ,IAAInB,aAAa,CAACmB,QAAD,CAApC;;AACA,MAAIC,IAAJ,EAAU;AACRN,IAAAA,IAAI,CAACO,SAAL,GAAiBD,IAAI,CAAC,CAAD,CAAJ,GAAUZ,MAAV,GAAmBY,IAAI,CAAC,CAAD,CAAxC;AAEA,QAAIE,SAAS,GAAGF,IAAI,CAAC,CAAD,CAApB;;AACA,WAAOE,SAAS,EAAhB,EAAoB;AAClBR,MAAAA,IAAI,GAAGA,IAAI,CAACS,SAAZ;AACD;AACF,GAPD,MAOO;AACLT,IAAAA,IAAI,CAACO,SAAL,GAAiBb,MAAjB;AACD;;AAED,MAAIgB,OAAO,GAAGV,IAAI,CAACW,oBAAL,CAA0B,QAA1B,CAAd;;AACA,MAAID,OAAO,CAACE,MAAZ,EAAoB;AAClB,KAACb,YAAD,GAAgBE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,SAAS,CAAC,KAAD,EAAQ,mEAAR,CAAjD,GAAgIA,SAAS,CAAC,KAAD,CAAzJ,GAAmKiB,SAAnK;AACAnB,IAAAA,oBAAoB,CAACyB,OAAD,CAApB,CAA8BG,OAA9B,CAAsCd,YAAtC;AACD;;AAED,MAAIe,KAAK,GAAG7B,oBAAoB,CAACe,IAAI,CAACe,UAAN,CAAhC;;AACA,SAAOf,IAAI,CAACS,SAAZ,EAAuB;AACrBT,IAAAA,IAAI,CAACgB,WAAL,CAAiBhB,IAAI,CAACS,SAAtB;AACD;;AACD,SAAOK,KAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBpB,qBAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createNodesFromMarkup\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\n'use strict';\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar getMarkupWrap = require('./getMarkupWrap');\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = createArrayFromMixed(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;"]},"metadata":{},"sourceType":"script"}