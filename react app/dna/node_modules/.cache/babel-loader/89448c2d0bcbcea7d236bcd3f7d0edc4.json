{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n/* globals MSApp */\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\n\nvar setInnerHTML = function (node, html) {\n  node.innerHTML = html;\n}; // Win8 apps: Allow all html to be inserted\n\n\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n  setInnerHTML = function (node, html) {\n    MSApp.execUnsafeLocalFunction(function () {\n      node.innerHTML = html;\n    });\n  };\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function (node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      } // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n\n\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to\n        // the actual Unicode character (by Babel, for example).\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216\n        node.innerHTML = String.fromCharCode(0xFEFF) + html; // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n\n        var textNode = node.firstChild;\n\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n}\n\nmodule.exports = setInnerHTML;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/setInnerHTML.js"],"names":["ExecutionEnvironment","require","WHITESPACE_TEST","NONVISIBLE_TEST","setInnerHTML","node","html","innerHTML","MSApp","execUnsafeLocalFunction","canUseDOM","testElement","document","createElement","parentNode","replaceChild","test","String","fromCharCode","textNode","firstChild","data","length","removeChild","deleteData","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;AAEA;;AAEA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,+BAAD,CAAlC;;AAEA,IAAIC,eAAe,GAAG,cAAtB;AACA,IAAIC,eAAe,GAAG,sDAAtB;AAEA;;;;;;;;;AAQA,IAAIC,YAAY,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACvCD,EAAAA,IAAI,CAACE,SAAL,GAAiBD,IAAjB;AACD,CAFD,C,CAIA;;;AACA,IAAI,OAAOE,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,CAACC,uBAA1C,EAAmE;AACjEL,EAAAA,YAAY,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACnCE,IAAAA,KAAK,CAACC,uBAAN,CAA8B,YAAY;AACxCJ,MAAAA,IAAI,CAACE,SAAL,GAAiBD,IAAjB;AACD,KAFD;AAGD,GAJD;AAKD;;AAED,IAAIN,oBAAoB,CAACU,SAAzB,EAAoC;AAClC;AACA;AACA;AACA;AAEA;AACA,MAAIC,WAAW,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAlB;AACAF,EAAAA,WAAW,CAACJ,SAAZ,GAAwB,GAAxB;;AACA,MAAII,WAAW,CAACJ,SAAZ,KAA0B,EAA9B,EAAkC;AAChCH,IAAAA,YAAY,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACnC;AACA;AACA;AACA;AACA;AACA,UAAID,IAAI,CAACS,UAAT,EAAqB;AACnBT,QAAAA,IAAI,CAACS,UAAL,CAAgBC,YAAhB,CAA6BV,IAA7B,EAAmCA,IAAnC;AACD,OARkC,CAUnC;AACA;AACA;AACA;;;AACA,UAAIH,eAAe,CAACc,IAAhB,CAAqBV,IAArB,KAA8BA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAZ,IAAmBH,eAAe,CAACa,IAAhB,CAAqBV,IAArB,CAArD,EAAiF;AAC/E;AACA;AACA;AACA;AACA;AACA;AACAD,QAAAA,IAAI,CAACE,SAAL,GAAiBU,MAAM,CAACC,YAAP,CAAoB,MAApB,IAA8BZ,IAA/C,CAP+E,CAS/E;AACA;;AACA,YAAIa,QAAQ,GAAGd,IAAI,CAACe,UAApB;;AACA,YAAID,QAAQ,CAACE,IAAT,CAAcC,MAAd,KAAyB,CAA7B,EAAgC;AAC9BjB,UAAAA,IAAI,CAACkB,WAAL,CAAiBJ,QAAjB;AACD,SAFD,MAEO;AACLA,UAAAA,QAAQ,CAACK,UAAT,CAAoB,CAApB,EAAuB,CAAvB;AACD;AACF,OAjBD,MAiBO;AACLnB,QAAAA,IAAI,CAACE,SAAL,GAAiBD,IAAjB;AACD;AACF,KAlCD;AAmCD;AACF;;AAEDmB,MAAM,CAACC,OAAP,GAAiBtB,YAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule setInnerHTML\n */\n\n/* globals MSApp */\n\n'use strict';\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar WHITESPACE_TEST = /^[ \\r\\n\\t\\f]/;\nvar NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \\r\\n\\t\\f\\/>]/;\n\n/**\n * Set the innerHTML property of a node, ensuring that whitespace is preserved\n * even in IE8.\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = function (node, html) {\n  node.innerHTML = html;\n};\n\n// Win8 apps: Allow all html to be inserted\nif (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n  setInnerHTML = function (node, html) {\n    MSApp.execUnsafeLocalFunction(function () {\n      node.innerHTML = html;\n    });\n  };\n}\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE8: When updating a just created node with innerHTML only leading\n  // whitespace is removed. When updating an existing node with innerHTML\n  // whitespace in root TextNodes is also collapsed.\n  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n  // Feature detection; only IE8 is known to behave improperly like this.\n  var testElement = document.createElement('div');\n  testElement.innerHTML = ' ';\n  if (testElement.innerHTML === '') {\n    setInnerHTML = function (node, html) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      // TODO: What to do on a detached node?\n      if (node.parentNode) {\n        node.parentNode.replaceChild(node, node);\n      }\n\n      // We also implement a workaround for non-visible tags disappearing into\n      // thin air on IE8, this only happens if there is no visible text\n      // in-front of the non-visible tags. Piggyback on the whitespace fix\n      // and simply check if any non-visible tags appear in the source.\n      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode\n        // in hopes that this is preserved even if \"\\uFEFF\" is transformed to\n        // the actual Unicode character (by Babel, for example).\n        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216\n        node.innerHTML = String.fromCharCode(0xFEFF) + html;\n\n        // deleteData leaves an empty `TextNode` which offsets the index of all\n        // children. Definitely want to avoid this.\n        var textNode = node.firstChild;\n        if (textNode.data.length === 1) {\n          node.removeChild(textNode);\n        } else {\n          textNode.deleteData(0, 1);\n        }\n      } else {\n        node.innerHTML = html;\n      }\n    };\n  }\n}\n\nmodule.exports = setInnerHTML;"]},"metadata":{},"sourceType":"script"}