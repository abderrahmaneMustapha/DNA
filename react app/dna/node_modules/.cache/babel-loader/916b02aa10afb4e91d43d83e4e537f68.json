{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n'use strict';\n\nvar ReactUpdates = require('./ReactUpdates');\n\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\nassign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true; // The code is written this way to avoid extra allocations\n\n    if (alreadyBatchingUpdates) {\n      callback(a, b, c, d, e);\n    } else {\n      transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\nmodule.exports = ReactDefaultBatchingStrategy;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/ReactDefaultBatchingStrategy.js"],"names":["ReactUpdates","require","Transaction","assign","emptyFunction","RESET_BATCHED_UPDATES","initialize","close","ReactDefaultBatchingStrategy","isBatchingUpdates","FLUSH_BATCHED_UPDATES","flushBatchedUpdates","bind","TRANSACTION_WRAPPERS","ReactDefaultBatchingStrategyTransaction","reinitializeTransaction","prototype","Mixin","getTransactionWrappers","transaction","batchedUpdates","callback","a","b","c","d","e","alreadyBatchingUpdates","perform","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIE,MAAM,GAAGF,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,wBAAD,CAA3B;;AAEA,IAAII,qBAAqB,GAAG;AAC1BC,EAAAA,UAAU,EAAEF,aADc;AAE1BG,EAAAA,KAAK,EAAE,YAAY;AACjBC,IAAAA,4BAA4B,CAACC,iBAA7B,GAAiD,KAAjD;AACD;AAJyB,CAA5B;AAOA,IAAIC,qBAAqB,GAAG;AAC1BJ,EAAAA,UAAU,EAAEF,aADc;AAE1BG,EAAAA,KAAK,EAAEP,YAAY,CAACW,mBAAb,CAAiCC,IAAjC,CAAsCZ,YAAtC;AAFmB,CAA5B;AAKA,IAAIa,oBAAoB,GAAG,CAACH,qBAAD,EAAwBL,qBAAxB,CAA3B;;AAEA,SAASS,uCAAT,GAAmD;AACjD,OAAKC,uBAAL;AACD;;AAEDZ,MAAM,CAACW,uCAAuC,CAACE,SAAzC,EAAoDd,WAAW,CAACe,KAAhE,EAAuE;AAC3EC,EAAAA,sBAAsB,EAAE,YAAY;AAClC,WAAOL,oBAAP;AACD;AAH0E,CAAvE,CAAN;AAMA,IAAIM,WAAW,GAAG,IAAIL,uCAAJ,EAAlB;AAEA,IAAIN,4BAA4B,GAAG;AACjCC,EAAAA,iBAAiB,EAAE,KADc;;AAGjC;;;;AAIAW,EAAAA,cAAc,EAAE,UAAUC,QAAV,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,CAA1B,EAA6BC,CAA7B,EAAgCC,CAAhC,EAAmC;AACjD,QAAIC,sBAAsB,GAAGnB,4BAA4B,CAACC,iBAA1D;AAEAD,IAAAA,4BAA4B,CAACC,iBAA7B,GAAiD,IAAjD,CAHiD,CAKjD;;AACA,QAAIkB,sBAAJ,EAA4B;AAC1BN,MAAAA,QAAQ,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,CAAR;AACD,KAFD,MAEO;AACLP,MAAAA,WAAW,CAACS,OAAZ,CAAoBP,QAApB,EAA8B,IAA9B,EAAoCC,CAApC,EAAuCC,CAAvC,EAA0CC,CAA1C,EAA6CC,CAA7C,EAAgDC,CAAhD;AACD;AACF;AAlBgC,CAAnC;AAqBAG,MAAM,CAACC,OAAP,GAAiBtB,4BAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n'use strict';\n\nvar ReactUpdates = require('./ReactUpdates');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\nassign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b, c, d, e);\n    } else {\n      transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;"]},"metadata":{},"sourceType":"script"}