{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n'use strict';\n\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');\n\nvar ReactElement = require('./ReactElement');\n\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\n\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\n\nvar ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');\n\nvar ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');\n\nvar ReactUpdates = require('./ReactUpdates');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\n\nvar instantiateReactComponent = require('./instantiateReactComponent');\n\nvar invariant = require('fbjs/lib/invariant');\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup\n */\n\n\nfunction renderToString(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n  var transaction;\n\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(false);\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      var markup = componentInstance.mountComponent(id, transaction, emptyObject);\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction); // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup, without the extra React ID and checksum\n * (for generating static pages)\n */\n\n\nfunction renderToStaticMarkup(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n  var transaction;\n\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(true);\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      return componentInstance.mountComponent(id, transaction, emptyObject);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction); // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n\nmodule.exports = {\n  renderToString: renderToString,\n  renderToStaticMarkup: renderToStaticMarkup\n};","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/ReactServerRendering.js"],"names":["ReactDefaultBatchingStrategy","require","ReactElement","ReactInstanceHandles","ReactMarkupChecksum","ReactServerBatchingStrategy","ReactServerRenderingTransaction","ReactUpdates","emptyObject","instantiateReactComponent","invariant","renderToString","element","isValidElement","process","env","NODE_ENV","undefined","transaction","injection","injectBatchingStrategy","id","createReactRootID","getPooled","perform","componentInstance","markup","mountComponent","addChecksumToMarkup","release","renderToStaticMarkup","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactServerRendering\n */\n'use strict';\n\nvar ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');\nvar ReactElement = require('./ReactElement');\nvar ReactInstanceHandles = require('./ReactInstanceHandles');\nvar ReactMarkupChecksum = require('./ReactMarkupChecksum');\nvar ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');\nvar ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar instantiateReactComponent = require('./instantiateReactComponent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup\n */\nfunction renderToString(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n\n  var transaction;\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(false);\n\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      var markup = componentInstance.mountComponent(id, transaction, emptyObject);\n      return ReactMarkupChecksum.addChecksumToMarkup(markup);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n    // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n\n/**\n * @param {ReactElement} element\n * @return {string} the HTML markup, without the extra React ID and checksum\n * (for generating static pages)\n */\nfunction renderToStaticMarkup(element) {\n  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;\n\n  var transaction;\n  try {\n    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);\n\n    var id = ReactInstanceHandles.createReactRootID();\n    transaction = ReactServerRenderingTransaction.getPooled(true);\n\n    return transaction.perform(function () {\n      var componentInstance = instantiateReactComponent(element, null);\n      return componentInstance.mountComponent(id, transaction, emptyObject);\n    }, null);\n  } finally {\n    ReactServerRenderingTransaction.release(transaction);\n    // Revert to the DOM batching strategy since these two renderers\n    // currently share these stateful modules.\n    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);\n  }\n}\n\nmodule.exports = {\n  renderToString: renderToString,\n  renderToStaticMarkup: renderToStaticMarkup\n};"]},"metadata":{},"sourceType":"script"}