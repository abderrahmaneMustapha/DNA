{"ast":null,"code":"/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n'use strict';\n\nvar EventConstants = require('./EventConstants');\n\nvar EventPropagators = require('./EventPropagators');\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar FallbackCompositionState = require('./FallbackCompositionState');\n\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n\nvar START_KEYCODE = 229;\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\nvar documentMode = null;\n\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n} // Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\n\n\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto(); // In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\n\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\n\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\nvar topLevelTypes = EventConstants.topLevelTypes; // Events and their corresponding property names.\n\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onBeforeInput: null\n      }),\n      captured: keyOf({\n        onBeforeInputCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionEnd: null\n      }),\n      captured: keyOf({\n        onCompositionEndCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionStart: null\n      }),\n      captured: keyOf({\n        onCompositionStartCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionUpdate: null\n      }),\n      captured: keyOf({\n        onCompositionUpdateCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n}; // Track whether we've ever handled a keypress on the space key.\n\nvar hasSpaceKeypress = false;\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\n\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\n\n\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\n\n\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\n\n\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\n\n\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n\n  return null;\n} // Track the current IME composition fallback object, if any.\n\n\nvar currentComposition = null;\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\n\nfunction extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\n\n\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\n\n\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n\n      return null;\n\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n\n    default:\n      return null;\n  }\n}\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\n\n\nfunction extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  } // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n\n\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\n\n\nvar BeforeInputEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];\n  }\n};\nmodule.exports = BeforeInputEventPlugin;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/BeforeInputEventPlugin.js"],"names":["EventConstants","require","EventPropagators","ExecutionEnvironment","FallbackCompositionState","SyntheticCompositionEvent","SyntheticInputEvent","keyOf","END_KEYCODES","START_KEYCODE","canUseCompositionEvent","canUseDOM","window","documentMode","document","canUseTextInputEvent","isPresto","useFallbackCompositionData","opera","version","parseInt","SPACEBAR_CODE","SPACEBAR_CHAR","String","fromCharCode","topLevelTypes","eventTypes","beforeInput","phasedRegistrationNames","bubbled","onBeforeInput","captured","onBeforeInputCapture","dependencies","topCompositionEnd","topKeyPress","topTextInput","topPaste","compositionEnd","onCompositionEnd","onCompositionEndCapture","topBlur","topKeyDown","topKeyUp","topMouseDown","compositionStart","onCompositionStart","onCompositionStartCapture","topCompositionStart","compositionUpdate","onCompositionUpdate","onCompositionUpdateCapture","topCompositionUpdate","hasSpaceKeypress","isKeypressCommand","nativeEvent","ctrlKey","altKey","metaKey","getCompositionEventType","topLevelType","isFallbackCompositionStart","keyCode","isFallbackCompositionEnd","indexOf","getDataFromCustomEvent","detail","data","currentComposition","extractCompositionEvent","topLevelTarget","topLevelTargetID","nativeEventTarget","eventType","fallbackData","getPooled","getData","event","customData","accumulateTwoPhaseDispatches","getNativeBeforeInputChars","which","chars","getFallbackBeforeInputChars","release","extractBeforeInputEvent","BeforeInputEventPlugin","extractEvents","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBeforeInput: null }),\n      captured: keyOf({ onBeforeInputCapture: null })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionEnd: null }),\n      captured: keyOf({ onCompositionEndCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionStart: null }),\n      captured: keyOf({ onCompositionStartCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionUpdate: null }),\n      captured: keyOf({ onCompositionUpdateCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;"]},"metadata":{},"sourceType":"script"}