{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMOption\n */\n'use strict';\n\nvar ReactChildren = require('./ReactChildren');\n\nvar ReactDOMSelect = require('./ReactDOMSelect');\n\nvar assign = require('./Object.assign');\n\nvar warning = require('fbjs/lib/warning');\n\nvar valueContextKey = ReactDOMSelect.valueContextKey;\n/**\n * Implements an <option> native component that warns when `selected` is set.\n */\n\nvar ReactDOMOption = {\n  mountWrapper: function (inst, props, context) {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;\n    } // Look up whether this option is 'selected' via context\n\n\n    var selectValue = context[valueContextKey]; // If context key is null (e.g., no specified value or after initial mount)\n    // or missing (e.g., for <datalist>), we don't change props.selected\n\n    var selected = null;\n\n    if (selectValue != null) {\n      selected = false;\n\n      if (Array.isArray(selectValue)) {\n        // multiple\n        for (var i = 0; i < selectValue.length; i++) {\n          if ('' + selectValue[i] === '' + props.value) {\n            selected = true;\n            break;\n          }\n        }\n      } else {\n        selected = '' + selectValue === '' + props.value;\n      }\n    }\n\n    inst._wrapperState = {\n      selected: selected\n    };\n  },\n  getNativeProps: function (inst, props, context) {\n    var nativeProps = assign({\n      selected: undefined,\n      children: undefined\n    }, props); // Read state only from initial mount because <select> updates value\n    // manually; we need the initial state only for server rendering\n\n    if (inst._wrapperState.selected != null) {\n      nativeProps.selected = inst._wrapperState.selected;\n    }\n\n    var content = ''; // Flatten children and warn if they aren't strings or numbers;\n    // invalid types are ignored.\n\n    ReactChildren.forEach(props.children, function (child) {\n      if (child == null) {\n        return;\n      }\n\n      if (typeof child === 'string' || typeof child === 'number') {\n        content += child;\n      } else {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;\n      }\n    });\n\n    if (content) {\n      nativeProps.children = content;\n    }\n\n    return nativeProps;\n  }\n};\nmodule.exports = ReactDOMOption;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/ReactDOMOption.js"],"names":["ReactChildren","require","ReactDOMSelect","assign","warning","valueContextKey","ReactDOMOption","mountWrapper","inst","props","context","process","env","NODE_ENV","selected","undefined","selectValue","Array","isArray","i","length","value","_wrapperState","getNativeProps","nativeProps","children","content","forEach","child","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMOption\n */\n\n'use strict';\n\nvar ReactChildren = require('./ReactChildren');\nvar ReactDOMSelect = require('./ReactDOMSelect');\n\nvar assign = require('./Object.assign');\nvar warning = require('fbjs/lib/warning');\n\nvar valueContextKey = ReactDOMSelect.valueContextKey;\n\n/**\n * Implements an <option> native component that warns when `selected` is set.\n */\nvar ReactDOMOption = {\n  mountWrapper: function (inst, props, context) {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;\n    }\n\n    // Look up whether this option is 'selected' via context\n    var selectValue = context[valueContextKey];\n\n    // If context key is null (e.g., no specified value or after initial mount)\n    // or missing (e.g., for <datalist>), we don't change props.selected\n    var selected = null;\n    if (selectValue != null) {\n      selected = false;\n      if (Array.isArray(selectValue)) {\n        // multiple\n        for (var i = 0; i < selectValue.length; i++) {\n          if ('' + selectValue[i] === '' + props.value) {\n            selected = true;\n            break;\n          }\n        }\n      } else {\n        selected = '' + selectValue === '' + props.value;\n      }\n    }\n\n    inst._wrapperState = { selected: selected };\n  },\n\n  getNativeProps: function (inst, props, context) {\n    var nativeProps = assign({ selected: undefined, children: undefined }, props);\n\n    // Read state only from initial mount because <select> updates value\n    // manually; we need the initial state only for server rendering\n    if (inst._wrapperState.selected != null) {\n      nativeProps.selected = inst._wrapperState.selected;\n    }\n\n    var content = '';\n\n    // Flatten children and warn if they aren't strings or numbers;\n    // invalid types are ignored.\n    ReactChildren.forEach(props.children, function (child) {\n      if (child == null) {\n        return;\n      }\n      if (typeof child === 'string' || typeof child === 'number') {\n        content += child;\n      } else {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;\n      }\n    });\n\n    if (content) {\n      nativeProps.children = content;\n    }\n\n    return nativeProps;\n  }\n\n};\n\nmodule.exports = ReactDOMOption;"]},"metadata":{},"sourceType":"script"}