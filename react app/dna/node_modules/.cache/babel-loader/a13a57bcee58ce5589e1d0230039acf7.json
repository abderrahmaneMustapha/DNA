{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n'use strict';\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\n\nvar ReactMount = require('./ReactMount');\n\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\n\nvar ReactDOMInput = {\n  getNativeProps: function (inst, props, context) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n    var nativeProps = assign({}, props, {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n    return nativeProps;\n  },\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n  mountReadyWrapper: function (inst) {\n    // Can't be in mountWrapper or else server rendering leaks.\n    instancesByReactID[inst._rootNodeID] = inst;\n  },\n  unmountWrapper: function (inst) {\n    delete instancesByReactID[inst._rootNodeID];\n  },\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props; // TODO: Shouldn't this be getChecked(props)?\n\n    var checked = props.checked;\n\n    if (checked != null) {\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event); // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  var name = props.name;\n\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactMount.getNode(this._rootNodeID);\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    } // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n\n\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      } // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React with non-React.\n\n\n      var otherID = ReactMount.getID(otherNode);\n      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;\n      var otherInstance = instancesByReactID[otherID];\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined; // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n\n  return returnValue;\n}\n\nmodule.exports = ReactDOMInput;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/ReactDOMInput.js"],"names":["ReactDOMIDOperations","require","LinkedValueUtils","ReactMount","ReactUpdates","assign","invariant","instancesByReactID","forceUpdateIfMounted","_rootNodeID","ReactDOMInput","updateWrapper","getNativeProps","inst","props","context","value","getValue","checked","getChecked","nativeProps","defaultChecked","undefined","defaultValue","_wrapperState","initialValue","initialChecked","onChange","mountWrapper","process","env","NODE_ENV","checkPropTypes","_currentElement","_owner","_handleChange","bind","mountReadyWrapper","unmountWrapper","updatePropertyByID","event","returnValue","executeOnChange","asap","name","type","rootNode","getNode","queryRoot","parentNode","group","querySelectorAll","JSON","stringify","i","length","otherNode","form","otherID","getID","otherInstance","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = {\n  getNativeProps: function (inst, props, context) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n\n    var nativeProps = assign({}, props, {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  mountReadyWrapper: function (inst) {\n    // Can't be in mountWrapper or else server rendering leaks.\n    instancesByReactID[inst._rootNodeID] = inst;\n  },\n\n  unmountWrapper: function (inst) {\n    delete instancesByReactID[inst._rootNodeID];\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // TODO: Shouldn't this be getChecked(props)?\n    var checked = props.checked;\n    if (checked != null) {\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactMount.getNode(this._rootNodeID);\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React with non-React.\n      var otherID = ReactMount.getID(otherNode);\n      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;\n      var otherInstance = instancesByReactID[otherID];\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n\n  return returnValue;\n}\n\nmodule.exports = ReactDOMInput;"]},"metadata":{},"sourceType":"script"}