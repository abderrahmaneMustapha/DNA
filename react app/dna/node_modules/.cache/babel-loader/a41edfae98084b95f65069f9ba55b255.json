{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n */\n'use strict';\n\nvar MOD = 65521; // adler32 is not cryptographically strong, and is only used to sanity check that\n// markup generated on the server matches the markup generated on the client.\n// This implementation (a modified version of the SheetJS version) has been optimized\n// for our use case, at the expense of conforming to the adler32 specification\n// for non-ascii inputs.\n\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  var i = 0;\n  var l = data.length;\n  var m = l & ~0x3;\n\n  while (i < m) {\n    for (; i < Math.min(i + 4096, m); i += 4) {\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }\n\n    a %= MOD;\n    b %= MOD;\n  }\n\n  for (; i < l; i++) {\n    b += a += data.charCodeAt(i);\n  }\n\n  a %= MOD;\n  b %= MOD;\n  return a | b << 16;\n}\n\nmodule.exports = adler32;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/adler32.js"],"names":["MOD","adler32","data","a","b","i","l","length","m","Math","min","charCodeAt","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,GAAG,GAAG,KAAV,C,CAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAGJ,IAAI,CAACK,MAAb;AACA,MAAIC,CAAC,GAAGF,CAAC,GAAG,CAAC,GAAb;;AACA,SAAOD,CAAC,GAAGG,CAAX,EAAc;AACZ,WAAOH,CAAC,GAAGI,IAAI,CAACC,GAAL,CAASL,CAAC,GAAG,IAAb,EAAmBG,CAAnB,CAAX,EAAkCH,CAAC,IAAI,CAAvC,EAA0C;AACxCD,MAAAA,CAAC,IAAI,CAACD,CAAC,IAAID,IAAI,CAACS,UAAL,CAAgBN,CAAhB,CAAN,KAA6BF,CAAC,IAAID,IAAI,CAACS,UAAL,CAAgBN,CAAC,GAAG,CAApB,CAAlC,KAA6DF,CAAC,IAAID,IAAI,CAACS,UAAL,CAAgBN,CAAC,GAAG,CAApB,CAAlE,KAA6FF,CAAC,IAAID,IAAI,CAACS,UAAL,CAAgBN,CAAC,GAAG,CAApB,CAAlG,CAAL;AACD;;AACDF,IAAAA,CAAC,IAAIH,GAAL;AACAI,IAAAA,CAAC,IAAIJ,GAAL;AACD;;AACD,SAAOK,CAAC,GAAGC,CAAX,EAAcD,CAAC,EAAf,EAAmB;AACjBD,IAAAA,CAAC,IAAID,CAAC,IAAID,IAAI,CAACS,UAAL,CAAgBN,CAAhB,CAAV;AACD;;AACDF,EAAAA,CAAC,IAAIH,GAAL;AACAI,EAAAA,CAAC,IAAIJ,GAAL;AACA,SAAOG,CAAC,GAAGC,CAAC,IAAI,EAAhB;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBZ,OAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule adler32\n */\n\n'use strict';\n\nvar MOD = 65521;\n\n// adler32 is not cryptographically strong, and is only used to sanity check that\n// markup generated on the server matches the markup generated on the client.\n// This implementation (a modified version of the SheetJS version) has been optimized\n// for our use case, at the expense of conforming to the adler32 specification\n// for non-ascii inputs.\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  var i = 0;\n  var l = data.length;\n  var m = l & ~0x3;\n  while (i < m) {\n    for (; i < Math.min(i + 4096, m); i += 4) {\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }\n    a %= MOD;\n    b %= MOD;\n  }\n  for (; i < l; i++) {\n    b += a += data.charCodeAt(i);\n  }\n  a %= MOD;\n  b %= MOD;\n  return a | b << 16;\n}\n\nmodule.exports = adler32;"]},"metadata":{},"sourceType":"script"}