{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n'use strict';\n\nvar EventConstants = require('./EventConstants');\n\nvar EventPluginHub = require('./EventPluginHub');\n\nvar EventPropagators = require('./EventPropagators');\n\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar ReactUpdates = require('./ReactUpdates');\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\n\nvar isEventSupported = require('./isEventSupported');\n\nvar isTextInputElement = require('./isTextInputElement');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onChange: null\n      }),\n      captured: keyOf({\n        onChangeCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }\n};\n/**\n * For IE shims\n */\n\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n/**\n * SECTION: handle `change` event\n */\n\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\n\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));\n  EventPropagators.accumulateTwoPhaseDispatches(event); // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue(false);\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\n\nfunction handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n/**\n * SECTION: handle `input` event\n */\n\n\nvar isInputEventSupported = false;\n\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);\n}\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\n\n\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\n\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value'); // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\n  // on DOM elements\n\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\n\n\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  } // delete restores the original property definition\n\n\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\n\n\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n\n  var value = nativeEvent.srcElement.value;\n\n  if (value === activeElementValue) {\n    return;\n  }\n\n  activeElementValue = value;\n  manualDispatchChangeEvent(nativeEvent);\n}\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\n\n\nfunction getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n} // For IE8 and IE9.\n\n\nfunction handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n} // For IE8 and IE9.\n\n\nfunction getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n/**\n * SECTION: handle `click` event\n */\n\n\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\n\n\nvar ChangeEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var getTargetIDFunc, handleEventFunc;\n\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);\n\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);\n        event.type = 'change';\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);\n    }\n  }\n};\nmodule.exports = ChangeEventPlugin;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/ChangeEventPlugin.js"],"names":["EventConstants","require","EventPluginHub","EventPropagators","ExecutionEnvironment","ReactUpdates","SyntheticEvent","getEventTarget","isEventSupported","isTextInputElement","keyOf","topLevelTypes","eventTypes","change","phasedRegistrationNames","bubbled","onChange","captured","onChangeCapture","dependencies","topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange","activeElement","activeElementID","activeElementValue","activeElementValueProp","shouldUseChangeEvent","elem","nodeName","toLowerCase","type","doesChangeEventBubble","canUseDOM","document","documentMode","manualDispatchChangeEvent","nativeEvent","event","getPooled","accumulateTwoPhaseDispatches","batchedUpdates","runEventInBatch","enqueueEvents","processEventQueue","startWatchingForChangeEventIE8","target","targetID","attachEvent","stopWatchingForChangeEventIE8","detachEvent","getTargetIDForChangeEvent","topLevelType","topLevelTarget","topLevelTargetID","handleEventsForChangeEventIE8","isInputEventSupported","newValueProp","get","call","set","val","startWatchingForValueChange","value","Object","getOwnPropertyDescriptor","constructor","prototype","defineProperty","handlePropertyChange","stopWatchingForValueChange","propertyName","srcElement","getTargetIDForInputEvent","handleEventsForInputEventIE","getTargetIDForInputEventIE","shouldUseClickEvent","getTargetIDForClickEvent","ChangeEventPlugin","extractEvents","nativeEventTarget","getTargetIDFunc","handleEventFunc","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ChangeEventPlugin\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactUpdates = require('./ReactUpdates');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar getEventTarget = require('./getEventTarget');\nvar isEventSupported = require('./isEventSupported');\nvar isTextInputElement = require('./isTextInputElement');\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onChange: null }),\n      captured: keyOf({ onChangeCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]\n  }\n};\n\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementID = null;\nvar activeElementValue = null;\nvar activeElementValueProp = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue(false);\n}\n\nfunction startWatchingForChangeEventIE8(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementID = null;\n}\n\nfunction getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topChange) {\n    return topLevelTargetID;\n  }\n}\nfunction handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);\n}\n\n/**\n * (For old IE.) Replacement getter/setter for the `value` property that gets\n * set on the active element.\n */\nvar newValueProp = {\n  get: function () {\n    return activeElementValueProp.get.call(this);\n  },\n  set: function (val) {\n    // Cast to a string so we can do equality checks.\n    activeElementValue = '' + val;\n    activeElementValueProp.set.call(this, val);\n  }\n};\n\n/**\n * (For old IE.) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetID) {\n  activeElement = target;\n  activeElementID = targetID;\n  activeElementValue = target.value;\n  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');\n\n  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only\n  // on DOM elements\n  Object.defineProperty(activeElement, 'value', newValueProp);\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For old IE.) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n\n  // delete restores the original property definition\n  delete activeElement.value;\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n\n  activeElement = null;\n  activeElementID = null;\n  activeElementValue = null;\n  activeElementValueProp = null;\n}\n\n/**\n * (For old IE.) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  var value = nativeEvent.srcElement.value;\n  if (value === activeElementValue) {\n    return;\n  }\n  activeElementValue = value;\n\n  manualDispatchChangeEvent(nativeEvent);\n}\n\n/**\n * If a `change` event should be fired, returns the target's ID.\n */\nfunction getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topInput) {\n    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly\n    // what we want so fall through here and trigger an abstract event\n    return topLevelTargetID;\n  }\n}\n\n// For IE8 and IE9.\nfunction handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topFocus) {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(topLevelTarget, topLevelTargetID);\n  } else if (topLevelType === topLevelTypes.topBlur) {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    if (activeElement && activeElement.value !== activeElementValue) {\n      activeElementValue = activeElement.value;\n      return activeElementID;\n    }\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {\n  if (topLevelType === topLevelTypes.topClick) {\n    return topLevelTargetID;\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n\n    var getTargetIDFunc, handleEventFunc;\n    if (shouldUseChangeEvent(topLevelTarget)) {\n      if (doesChangeEventBubble) {\n        getTargetIDFunc = getTargetIDForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(topLevelTarget)) {\n      if (isInputEventSupported) {\n        getTargetIDFunc = getTargetIDForInputEvent;\n      } else {\n        getTargetIDFunc = getTargetIDForInputEventIE;\n        handleEventFunc = handleEventsForInputEventIE;\n      }\n    } else if (shouldUseClickEvent(topLevelTarget)) {\n      getTargetIDFunc = getTargetIDForClickEvent;\n    }\n\n    if (getTargetIDFunc) {\n      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);\n      if (targetID) {\n        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);\n        event.type = 'change';\n        EventPropagators.accumulateTwoPhaseDispatches(event);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);\n    }\n  }\n\n};\n\nmodule.exports = ChangeEventPlugin;"]},"metadata":{},"sourceType":"script"}