{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\icom\\\\myProjects\\\\DNA\\\\react app\\\\dna\\\\src\\\\dashboard\\\\Dashboard.js\";\nimport React from 'react';\nimport './dashboard.css';\nimport Card from 'react-bootstrap/Card';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HorizontalBar, defaults, Bar, HeatMap } from 'react-chartjs-2';\ndefaults.global.defaultFontColor = '#E7E7EB';\ndefaults.scale.ticks.beginAtZero = true;\ndefaults.scale.ticks.suggestedMax = 100;\nvar bac_fields = [{\n  \"path_id\": 1,\n  \"path_name\": \"S\"\n}, {\n  \"path_id\": 2,\n  \"path_name\": \"M\"\n}, {\n  \"path_id\": 4,\n  \"path_name\": \"TM\"\n}, {\n  \"path_id\": 5,\n  \"path_name\": \"other\"\n}];\n\nclass Dashboard extends React.Component {\n  constructor() {\n    super();\n\n    this.calculatebestcourses = result => {\n      var temp = [];\n\n      for (var i = 0; i < result.length; i++) {\n        var id = result[i][\"cours_id\"];\n        var admis = result[i].admis_number;\n        var total = result[i].student_number;\n        temp.push({\n          \"id\": id,\n          \"winrate\": (admis / total).toFixed(4) * 100\n        });\n      }\n\n      temp.sort((a, b) => {\n        return b.winrate - a.winrate;\n      });\n      var best_temp = [];\n      var winrate_temp = [];\n\n      for (var i = 0; i < temp.length; i++) {\n        best_temp.push(temp[i]['id']);\n        winrate_temp.push(temp[i]['winrate']);\n      }\n\n      this.setState({\n        best_courses: [...best_temp],\n        best_courses_winrate: [...winrate_temp]\n      });\n    };\n\n    this.calculatepopularfield = result => {\n      var temp = [];\n\n      for (var i = 0; i < bac_fields.length; i++) {\n        var count = 0;\n\n        for (var j = 0; j < result.length; j++) {\n          if (bac_fields[i]['path_id'] == result[j]['highshcool_path']) {\n            count++;\n          }\n        }\n\n        temp.push({\n          'bac_path': bac_fields[i]['path_name'],\n          'percentage': (count / result.length).toFixed(4) * 100\n        });\n      }\n\n      temp.sort((a, b) => {\n        return parseFloat(b.percentage) - parseFloat(a.percentage);\n      });\n      let field_temp = [];\n      let percentage_temp = [];\n\n      for (var i = 0; i < temp.length; i++) {\n        field_temp.push(temp[i]['bac_path']);\n        percentage_temp.push(temp[i]['percentage']);\n      }\n\n      this.setState({\n        popular_fields: [...field_temp],\n        popular_fields_number: [...percentage_temp]\n      });\n    };\n\n    this.calculatebestbacfield = result => {\n      var temp = [];\n\n      for (var i = 0; i < bac_fields.length; i++) {\n        var count_student = 0;\n        var count_admis = 0;\n\n        for (var j = 0; j < result.length; j++) {\n          if (bac_fields[i]['path_id'] == result[j]['path']) {\n            count_student += result[j]['student_number'];\n            count_admis += result[j]['admis_number'];\n          }\n        }\n\n        temp.push({\n          'bac_path': bac_fields[i]['path_name'],\n          'winrate': (count_admis / count_student).toFixed(4) * 100\n        });\n      }\n\n      temp.sort((a, b) => {\n        return parseFloat(b.winrate) - parseFloat(a.winrate);\n      });\n      let field_temp = [];\n      let winrate_temp = [];\n\n      for (var i = 0; i < temp.length; i++) {\n        field_temp.push(temp[i]['bac_path']);\n        winrate_temp.push(temp[i]['winrate']);\n      }\n\n      this.setState({\n        best_bacfield: [...field_temp],\n        best_bacfield_winrate: [...winrate_temp]\n      });\n    };\n\n    this.calculatebestgender = result => {\n      let temp = [];\n      var total_admis_student = 0;\n      var total_male = 0;\n      var total_female = 0;\n\n      for (var i = 0; i < result.length; i++) {\n        total_admis_student += result[i]['admis_number'];\n        total_male += result[i]['m_admis_number'];\n        total_female += result[i].admis_number - result[i].m_admis_number;\n      }\n\n      temp.push({\n        'gender': 'Male',\n        'winrate': (total_male / total_admis_student).toFixed(4) * 100\n      });\n      temp.push({\n        'gender': 'Female',\n        'winrate': (total_female / total_admis_student).toFixed(4) * 100\n      });\n      temp.sort((a, b) => {\n        return b.winrate - a.winrate;\n      });\n      let gender_temp = [];\n      let winrate_temp = [];\n\n      for (var i = 0; i < temp.length; i++) {\n        gender_temp.push(temp[i]['gender']);\n        winrate_temp.push(temp[i]['winrate']);\n      }\n\n      this.setState({\n        best_gender: [...gender_temp],\n        best_gender_winrate: [...winrate_temp]\n      });\n    };\n\n    this.getscholaryears = result => {\n      let temp = [];\n\n      for (var i = 0; i < result.length; i++) {\n        temp.push(result[i]['scholar_year']);\n      }\n\n      this.setState({\n        years: [...temp]\n      });\n    };\n\n    this.findStudentPath = id => {\n      for (var i = 0; i < bac_fields.length; i++) {\n        if (bac_fields[i]['path_id'] == id) {\n          return bac_fields[i]['path_name'];\n        }\n      }\n    };\n\n    this.calculatebestcourseyear = result => {\n      let temp = [];\n\n      for (var i = 0; i < result.length; i++) {\n        temp.push({\n          \"course\": result[i].course,\n          \"year\": this.state.years[result[i]['date'] - 1],\n          \"bac_path\": this.findStudentPath(result[i].path),\n          \"winrate\": isNaN((parseInt(result[i].admis_number) / parseInt(result[i].student_number)).toFixed(4) * 100) ? 0 : (parseInt(result[i].admis_number) / parseInt(result[i].student_number)).toFixed(4) * 100\n        });\n      }\n\n      temp.sort((a, b) => {\n        return parseInt(b.winrate) - parseInt(a.winrate);\n      });\n      var temp_courses = [];\n      var temp_years = [];\n      var temp_bac_paths = [];\n      var temp_winrates = [];\n\n      for (var i = 0; i < temp.length; i++) {\n        if (temp_courses.indexOf(temp[i].course) === -1 && temp[i].winrate > 0) {\n          temp_courses.push(temp[i].course);\n          temp_years.push(temp[i].year);\n          temp_bac_paths.push(temp[i].bac_path);\n          temp_winrates.push(temp[i].winrate);\n        }\n      }\n\n      this.setState({\n        year_cours: [...temp_courses],\n        year_years: [...temp_years],\n        year_path: [...temp_bac_paths],\n        year_winrate: [...temp_winrates]\n      });\n      temp.sort((a, b) => parseFloat(a.winrate) - parseFloat(b.winrate));\n      temp_courses = [];\n      temp_years = [];\n      temp_bac_paths = [];\n      temp_winrates = [];\n\n      for (var i = 0; i < temp.length; i++) {\n        if (temp_courses.indexOf(temp[i].course) === -1 && temp[i].winrate > 0) {\n          temp_courses.push(temp[i].course);\n          temp_years.push(temp[i].year);\n          temp_bac_paths.push(temp[i].bac_path);\n          temp_winrates.push(temp[i].winrate);\n        }\n      }\n\n      console.log(temp_courses.slice(0, 5));\n      console.log(temp_winrates.slice(0, 5));\n      this.setState({\n        year_cours_worst: [...temp_courses],\n        year_years_worst: [...temp_years],\n        year_path_worst: [...temp_bac_paths],\n        year_winrate_worst: [...temp_winrates]\n      });\n    };\n\n    this.getbestbacavg = result => {\n      var bac_avgs = [];\n      var bac_paths = [];\n      var bac_student = [];\n      var bac_years = [];\n      var bac_feedbacks = [];\n      var bac_id = [];\n      result.sort((a, b) => {\n        return parseFloat(b.bac_avg) - parseFloat(a.bac_avg);\n      });\n\n      for (var i = 0; i < result.length; i++) {\n        bac_avgs.push(result[i]['bac_avg']);\n        bac_paths.push(this.findStudentPath(result[i]['highshcool_path']));\n        bac_student.push(result[i]['student_id']);\n        bac_years.push(result[i]['bac_year']);\n        bac_feedbacks.push(result[i]['bac_feedback']);\n        bac_id.push(result[i]['bac_id']);\n      }\n\n      this.setState({\n        bac_avgs: [...bac_avgs],\n        bac_paths: [...bac_paths],\n        bac_student: [...bac_student],\n        bac_years: [...bac_years],\n        bac_feedbacks: [...bac_feedbacks],\n        bac_id: [...bac_id]\n      });\n    };\n\n    this.getadmisperyear = result => {\n      var years = this.state.years;\n      var temp = [];\n      var temp_ajrn = [];\n\n      for (var i = 0; i < years.length; i++) {\n        var count_total = 0;\n        var count_ajr = 0;\n\n        for (var j = 0; j < result.length; j++) {\n          if (result[j].scholar_year == years[i]) {\n            count_total++;\n\n            if (result[j].statu == 'AjournÃ©') {\n              count_ajr++;\n            }\n          }\n        }\n\n        temp.push(((count_total - count_ajr) / count_total).toFixed(4) * 100);\n        temp_ajrn.push((count_ajr / count_total).toFixed(4) * 100);\n      }\n\n      this.setState({\n        'admis_years': [...temp],\n        'ajrn_years': [...temp_ajrn]\n      });\n    };\n\n    this.connectToBestCourses = () => {\n      fetch('http://127.0.0.1:8000/best_courses/').then(res => res.json()).then(result => {\n        this.calculatebestcourses(result);\n      });\n    };\n\n    this.connectToBac = () => {\n      fetch('http://127.0.0.1:8000/bac/').then(res => res.json()).then(result => {\n        this.getbestbacavg(result);\n        this.calculatepopularfield(result);\n      });\n    };\n\n    this.connectToCourseProfile = () => {\n      fetch('http://127.0.0.1:8000/course_profile/').then(res => res.json()).then(result => {\n        this.calculatebestbacfield(result);\n        this.calculatebestgender(result);\n      });\n    };\n\n    this.connectToCourseProfileBydate = () => {\n      var date = this.state.years.indexOf(this.state.current_year) + 1 == 0 ? 1 : this.state.years.indexOf(this.state.current_year) + 1;\n      fetch('http://127.0.0.1:8000/course_profile/?date=' + date).then(res => res.json()).then(result => {\n        this.calculatebestcourseyear(result);\n      });\n    };\n\n    this.connectToScholarYear = () => {\n      fetch('http://127.0.0.1:8000/scholar_years/').then(res => res.json()).then(result => {\n        this.getscholaryears(result);\n      });\n    };\n\n    this.connectToStudentInfo = () => {\n      fetch('http://127.0.0.1:8000/student_info/').then(res => res.json()).then(result => {\n        this.getadmisperyear(result);\n      });\n    };\n\n    this.handleClickYear = e => {\n      let year = e.target.text;\n      this.setState({\n        current_year: parseInt(year)\n      });\n      this.connectToCourseProfileBydate();\n    };\n\n    this.displayYears = () => {\n      const yearsList = this.state.years.map(year => React.createElement(\"li\", {\n        className: \"list-group-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"nav-link text-white\",\n        href: \"#year-analysis\",\n        onClick: this.handleClickYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        },\n        __self: this\n      }, year)));\n      return yearsList;\n    };\n\n    this.diplayBestBacresults = () => {\n      var bac_list = [];\n      let bac_avgs = [...this.state.bac_avgs];\n      var bac_paths = [...this.state.bac_paths];\n      var bac_student = [...this.state.bac_student];\n      var bac_years = [...this.state.bac_years];\n      var bac_feedbacks = [...this.state.bac_feedbacks];\n      var bac_id = [...this.state.bac_id];\n\n      for (var i = 0; i < 10; i++) {\n        bac_list.push(React.createElement(\"li\", {\n          id: \"bac_list_group_item\",\n          className: \"list-group-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 497\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"#bac_ids\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 498\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 499\n          },\n          __self: this\n        }, \" student : \", bac_student[i]), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 500\n          },\n          __self: this\n        }, \" id: \", bac_id[i])), React.createElement(\"div\", {\n          id: \"#bac_infos\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 503\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 504\n          },\n          __self: this\n        }, \"Avg: \", bac_avgs[i]), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 505\n          },\n          __self: this\n        }, bac_feedbacks[i])), React.createElement(\"div\", {\n          id: \"bac_year\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 508\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 509\n          },\n          __self: this\n        }, \"Year: \", bac_years[i]), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 510\n          },\n          __self: this\n        }, \"Path: \", bac_paths[i]))));\n      }\n\n      return bac_list;\n    };\n\n    this.state = {\n      best_courses: [],\n      best_courses_winrate: [],\n      popular_fields: [],\n      popular_fields_number: [],\n      best_bacfield: [],\n      best_bacfield_winrate: [],\n      best_gender: [],\n      best_gender_winrate: [],\n      years: [],\n      current_year: 2010,\n      crrent_level: 1,\n      current_field: \"MIAS\",\n      year_cours: [],\n      year_years: [],\n      year_path: [],\n      year_winrate: [],\n      year_cours_worst: [],\n      year_years_worst: [],\n      year_path_worst: [],\n      year_winrate_worst: [],\n      bac_avgs: [],\n      bac_paths: [],\n      bac_student: [],\n      bac_years: [],\n      bac_feedbacks: [],\n      bac_id: [],\n      'admis_years': [],\n      'ajrn_years': [],\n      'study_levels': ['MGI', 'MIAS'],\n      'study_field': []\n    };\n    this.handleClickYear = this.handleClickYear.bind(this);\n  }\n  /*\r\n    filter and calculate Api results\r\n  */\n\n\n  /*\r\n    END OfConnections to DNA API\r\n  */\n  componentDidMount() {\n    this.connectToScholarYear();\n    this.connectToBestCourses();\n    this.connectToBac();\n    this.connectToCourseProfile();\n    this.connectToCourseProfileBydate();\n    this.connectToStudentInfo();\n  }\n  /*\r\n    handle events\r\n  */\n\n\n  /*\r\n     end of handle events\r\n  */\n  render() {\n    const cardWidth = \"22rem\";\n    const greenBarColor = \"#18BD9B\";\n    const redBarColor = \"#E54787\";\n    let yearsList = this.displayYears();\n    let bacList = this.diplayBestBacresults();\n    return React.createElement(\"div\", {\n      className: \"Dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, \"Dashboard\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, React.createElement(\"article\", {\n      className: \"col-md-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    }, \"General Info\")), React.createElement(\"div\", {\n      id: \"general-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, React.createElement(Card, {\n      id: \"best-courses\",\n      style: {\n        width: cardWidth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, React.createElement(HorizontalBar, {\n      data: {\n        labels: this.state.best_courses.slice(0, 5),\n        datasets: [{\n          label: \"Top 5 Admis Percentage since 2010 \",\n          backgroundColor: greenBarColor,\n          data: this.state.best_courses_winrate.slice(0, 5)\n        }]\n      },\n      width: 100,\n      height: 200,\n      options: {\n        maintainAspectRatio: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      id: \"popular-bacfield\",\n      style: {\n        width: cardWidth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569\n      },\n      __self: this\n    }, React.createElement(HorizontalBar, {\n      data: {\n        labels: this.state.popular_fields,\n        datasets: [{\n          label: \"Most popular bac field since 2010\",\n          backgroundColor: greenBarColor,\n          data: this.state.popular_fields_number\n        }]\n      },\n      width: 100,\n      height: 200,\n      options: {\n        maintainAspectRatio: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      id: \"best-bacfield\",\n      style: {\n        width: cardWidth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }, React.createElement(HorizontalBar, {\n      data: {\n        labels: this.state.best_bacfield,\n        datasets: [{\n          label: \"Top  bac field since 2010\",\n          backgroundColor: greenBarColor,\n          data: this.state.best_bacfield_winrate\n        }]\n      },\n      width: 100,\n      height: 200,\n      options: {\n        maintainAspectRatio: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      id: \"best-gender\",\n      style: {\n        width: cardWidth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, React.createElement(HorizontalBar, {\n      data: {\n        labels: this.state.best_gender,\n        datasets: [{\n          label: \"Male Vs Female Admis since  2010\",\n          backgroundColor: greenBarColor,\n          data: this.state.best_gender_winrate\n        }]\n      },\n      width: 100,\n      height: 200,\n      options: {\n        maintainAspectRatio: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: {\n        labels: this.state.years,\n        datasets: [{\n          label: \"Admis\",\n          backgroundColor: greenBarColor,\n          data: this.state.admis_years\n        }, {\n          label: \"Ajourne\",\n          backgroundColor: redBarColor,\n          data: this.state.ajrn_years\n        }]\n      },\n      width: 100,\n      height: 80,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627\n      },\n      __self: this\n    }))))), React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, \"Years Analysis\")), React.createElement(\"div\", {\n      id: \"year-analysis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"navbar navbar-expand-lg navbar-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"collapse navbar-collapse\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      id: \"years_list\",\n      className: \"navbar-nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661\n      },\n      __self: this\n    }, yearsList))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666\n      },\n      __self: this\n    }, React.createElement(Card, {\n      id: \"years_analysis_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: {\n        labels: this.state.year_cours.slice(0, 5),\n        datasets: [{\n          label: \"best modules for \" + this.state.current_year,\n          backgroundColor: greenBarColor,\n          data: this.state.year_winrate.slice(0, 5)\n        }]\n      },\n      width: 100,\n      height: 80,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: {\n        labels: this.state.year_cours_worst.slice(0, 5),\n        datasets: [{\n          label: \"worste modules for \" + this.state.current_year,\n          backgroundColor: redBarColor,\n          data: this.state.year_winrate_worst.slice(0, 5)\n        }]\n      },\n      width: 100,\n      height: 80,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: {\n        labels: this.state.best_gender,\n        datasets: [{\n          label: \"Male Vs Female Admis since  2010\",\n          backgroundColor: greenBarColor,\n          data: this.state.best_gender_winrate\n        }]\n      },\n      width: 100,\n      height: 80,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: {\n        labels: this.state.best_gender,\n        datasets: [{\n          label: \"Male Vs Female Admis since  2010\",\n          backgroundColor: greenBarColor,\n          data: this.state.best_gender_winrate\n        }]\n      },\n      width: 100,\n      height: 80,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726\n      },\n      __self: this\n    }))))))))), React.createElement(\"aside\", {\n      className: \"col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, \"Best  10 Bac Avg since 2010\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: \"25rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      id: \"bac_list\",\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, bacList))))))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/src/dashboard/Dashboard.js"],"names":["React","Card","HorizontalBar","defaults","Bar","HeatMap","global","defaultFontColor","scale","ticks","beginAtZero","suggestedMax","bac_fields","Dashboard","Component","constructor","calculatebestcourses","result","temp","i","length","id","admis","admis_number","total","student_number","push","toFixed","sort","a","b","winrate","best_temp","winrate_temp","setState","best_courses","best_courses_winrate","calculatepopularfield","count","j","parseFloat","percentage","field_temp","percentage_temp","popular_fields","popular_fields_number","calculatebestbacfield","count_student","count_admis","best_bacfield","best_bacfield_winrate","calculatebestgender","total_admis_student","total_male","total_female","m_admis_number","gender_temp","best_gender","best_gender_winrate","getscholaryears","years","findStudentPath","calculatebestcourseyear","course","state","path","isNaN","parseInt","temp_courses","temp_years","temp_bac_paths","temp_winrates","indexOf","year","bac_path","year_cours","year_years","year_path","year_winrate","console","log","slice","year_cours_worst","year_years_worst","year_path_worst","year_winrate_worst","getbestbacavg","bac_avgs","bac_paths","bac_student","bac_years","bac_feedbacks","bac_id","bac_avg","getadmisperyear","temp_ajrn","count_total","count_ajr","scholar_year","statu","connectToBestCourses","fetch","then","res","json","connectToBac","connectToCourseProfile","connectToCourseProfileBydate","date","current_year","connectToScholarYear","connectToStudentInfo","handleClickYear","e","target","text","displayYears","yearsList","map","diplayBestBacresults","bac_list","crrent_level","current_field","bind","componentDidMount","render","cardWidth","greenBarColor","redBarColor","bacList","width","labels","datasets","label","backgroundColor","data","maintainAspectRatio","admis_years","ajrn_years"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './dashboard.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { HorizontalBar,defaults,Bar,HeatMap } from 'react-chartjs-2';\r\n\r\ndefaults.global.defaultFontColor = '#E7E7EB';\r\ndefaults.scale.ticks.beginAtZero = true; \r\ndefaults.scale.ticks.suggestedMax = 100\r\n\r\nvar bac_fields = [\r\n  {\r\n    \"path_id\": 1,\r\n    \"path_name\": \"S\"\r\n},\r\n{\r\n    \"path_id\": 2,\r\n    \"path_name\": \"M\"\r\n},\r\n{\r\n    \"path_id\": 4,\r\n    \"path_name\": \"TM\"\r\n},\r\n{\r\n    \"path_id\": 5,\r\n    \"path_name\": \"other\"\r\n}\r\n]\r\n\r\nclass Dashboard extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      best_courses : [],\r\n      best_courses_winrate: [],\r\n\r\n      popular_fields : [],\r\n      popular_fields_number : [],\r\n\r\n      best_bacfield: [],\r\n      best_bacfield_winrate: [],\r\n\r\n      best_gender: [],\r\n      best_gender_winrate: [],\r\n      \r\n      years : [],\r\n\r\n      current_year : 2010,\r\n      crrent_level: 1,\r\n      current_field:\"MIAS\",\r\n\r\n      year_cours: [],\r\n      year_years: [],\r\n      year_path: [],\r\n      year_winrate: [],\r\n\r\n      year_cours_worst: [],\r\n      year_years_worst: [],\r\n      year_path_worst: [],\r\n      year_winrate_worst: [],\r\n\r\n      bac_avgs: [],\r\n      bac_paths: [],\r\n      bac_student: [],\r\n      bac_years: [],\r\n      bac_feedbacks: [],\r\n      bac_id: [],\r\n\r\n      'admis_years' : [],\r\n      'ajrn_years' : [],\r\n\r\n      'study_levels': ['MGI','MIAS'],\r\n      'study_field' : [],     \r\n\r\n  }\r\n\r\n    this.handleClickYear = this.handleClickYear.bind(this);\r\n  \r\n  }\r\n\r\n\r\n\r\n/*\r\n  filter and calculate Api results\r\n*/\r\n calculatebestcourses = (result)=>{   \r\n  \r\n    var temp = []\r\n    for(var i=0; i< result.length;i++){\r\n      var id = result[i][\"cours_id\"]\r\n      var admis = result[i].admis_number\r\n      var total = result[i].student_number\r\n      temp.push({\"id\":id, \"winrate\": (admis/total).toFixed(4) * 100})\r\n    }\r\n    temp.sort((a,b)=> {\r\n      return b.winrate - a.winrate\r\n    })\r\n    var best_temp = []\r\n    var winrate_temp = []\r\n    for(var i=0; i< temp.length;i++){\r\n      best_temp.push(temp[i]['id'])\r\n      winrate_temp.push(temp[i]['winrate'])\r\n    }\r\n    this.setState({\r\n      best_courses:[...best_temp] ,\r\n      best_courses_winrate: [...winrate_temp],\r\n    })    \r\n\r\n}\r\n\r\ncalculatepopularfield = (result)=>{\r\n  var temp = []\r\n \r\n    \r\n    for(var i=0; i< bac_fields.length;i++){\r\n      var count = 0\r\n      for(var j=0; j<result.length;j++){\r\n        if(bac_fields[i]['path_id'] == result[j]['highshcool_path']){\r\n          count++\r\n        }\r\n      }\r\n      temp.push({\r\n        'bac_path': bac_fields[i]['path_name'],\r\n        'percentage': (count/result.length).toFixed(4) * 100\r\n      })\r\n      \r\n    }\r\n    temp.sort((a,b)=> {\r\n      return parseFloat(b.percentage) - parseFloat(a.percentage)\r\n    })\r\n    let field_temp = []\r\n    let percentage_temp = []\r\n    for(var i=0; i< temp.length;i++){\r\n      field_temp.push(temp[i]['bac_path'])\r\n      percentage_temp.push(temp[i]['percentage'])\r\n    }\r\n\r\n    this.setState({\r\n      popular_fields : [...field_temp],\r\n      popular_fields_number : [...percentage_temp]\r\n    }) \r\n   \r\n}\r\n\r\n\r\ncalculatebestbacfield = (result)=>{\r\n  var temp = []   \r\n  for(var i=0; i< bac_fields.length;i++){\r\n    var count_student = 0\r\n    var count_admis = 0\r\n    for(var j=0; j<result.length;j++){\r\n      if(bac_fields[i]['path_id'] == result[j]['path']){\r\n        count_student += result[j]['student_number']\r\n        count_admis += result[j]['admis_number']\r\n      }\r\n    }\r\n    temp.push({\r\n      'bac_path': bac_fields[i]['path_name'],\r\n      'winrate': (count_admis/ count_student).toFixed(4) * 100\r\n    })\r\n    \r\n  }\r\n\r\n  temp.sort((a,b)=> {\r\n    return parseFloat(b.winrate) -parseFloat(a.winrate)\r\n  })\r\n  let field_temp = []\r\n  let winrate_temp = []\r\n  for(var i=0; i< temp.length;i++){\r\n    field_temp.push(temp[i]['bac_path'])\r\n    winrate_temp .push(temp[i]['winrate'])\r\n  }\r\n\r\n  this.setState({\r\n    best_bacfield: [...field_temp],\r\n    best_bacfield_winrate: [...winrate_temp],\r\n  })\r\n}\r\n\r\ncalculatebestgender = (result)=>{\r\n  let temp = []\r\n  var total_admis_student = 0\r\n  var total_male = 0\r\n  var total_female = 0\r\n  \r\n  for(var i=0; i< result.length;i++){\r\n    total_admis_student += result[i]['admis_number']\r\n    total_male += result[i]['m_admis_number']\r\n    total_female +=  (result[i].admis_number - result[i].m_admis_number)\r\n  } \r\n\r\n  temp.push({'gender': 'Male', 'winrate': (total_male / total_admis_student).toFixed(4) * 100})\r\n  temp.push({'gender': 'Female', 'winrate': (total_female/ total_admis_student).toFixed(4) * 100 })\r\n\r\n  temp.sort((a,b)=> {\r\n    return b.winrate - a.winrate\r\n  })\r\n  \r\n  let gender_temp = []\r\n  let winrate_temp = []\r\n  for(var i=0; i< temp.length;i++){\r\n    gender_temp.push(temp[i]['gender'])\r\n    winrate_temp.push(temp[i]['winrate'])\r\n  }  \r\n\r\n  this.setState({\r\n    best_gender: [...gender_temp],\r\n    best_gender_winrate: [... winrate_temp],\r\n  })\r\n  \r\n}\r\n\r\ngetscholaryears = (result)=>{\r\n  let temp = []\r\n  for(var i=0; i< result.length;i++){\r\n     temp.push(result[i]['scholar_year'])\r\n  } \r\n\r\n  this.setState({\r\n    years : [...temp]\r\n  })\r\n}\r\nfindStudentPath = (id)=>{\r\n  for(var i=0; i<  bac_fields.length;i++){    \r\n    if(bac_fields[i]['path_id'] == id){\r\n      return bac_fields[i]['path_name']\r\n    }\r\n }\r\n}\r\ncalculatebestcourseyear = (result)=>{\r\n \r\n  let temp = []\r\n\r\n  for(var i=0; i< result.length;i++){       \r\n      temp.push({\r\n        \"course\" : result[i].course,\r\n        \"year\" : this.state.years[result[i]['date']-1],\r\n        \"bac_path\": this.findStudentPath(result[i].path),\r\n        \"winrate\": ( isNaN((parseInt(result[i].admis_number) / parseInt(result[i].student_number)).toFixed(4) * 100) ) ? 0 :   (parseInt(result[i].admis_number) / parseInt(result[i].student_number)).toFixed(4) * 100,       \r\n       })  \r\n     \r\n  }\r\n  temp.sort((a,b)=> {\r\n    return  parseInt(b.winrate) - parseInt(a.winrate)\r\n  })\r\n  var temp_courses = []\r\n  var temp_years = []\r\n  var temp_bac_paths = []\r\n  var temp_winrates= []\r\n\r\n  for(var i=0; i< temp.length;i++){  \r\n    if( (temp_courses.indexOf(temp[i].course) === -1) && temp[i].winrate > 0 ){\r\n      temp_courses.push(temp[i].course)\r\n      temp_years.push(temp[i].year)\r\n      temp_bac_paths.push(temp[i].bac_path)\r\n      temp_winrates.push(temp[i].winrate)\r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n  this.setState({\r\n    year_cours: [...temp_courses],\r\n    year_years: [...temp_years],\r\n    year_path: [...temp_bac_paths],\r\n    year_winrate: [...temp_winrates],\r\n     \r\n  })\r\n\r\n  temp.sort((a,b)=>\r\n   parseFloat(a.winrate) - parseFloat(b.winrate)\r\n  )\r\n   temp_courses = []\r\n   temp_years = []\r\n   temp_bac_paths = []\r\n   temp_winrates= []\r\n  for(var i=0; i< temp.length;i++){  \r\n    if( (temp_courses.indexOf(temp[i].course) === -1) && temp[i].winrate > 0 ){\r\n    temp_courses.push(temp[i].course)\r\n    temp_years.push(temp[i].year)\r\n    temp_bac_paths.push(temp[i].bac_path)\r\n    temp_winrates.push(temp[i].winrate)\r\n    }\r\n  }\r\n\r\n  console.log(temp_courses.slice(0,5))\r\n  console.log(temp_winrates.slice(0,5))\r\n  this.setState({\r\n    year_cours_worst: [...temp_courses],\r\n    year_years_worst: [...temp_years],\r\n    year_path_worst: [...temp_bac_paths],\r\n    year_winrate_worst: [...temp_winrates],\r\n     \r\n  })\r\n\r\n}\r\n\r\ngetbestbacavg = (result)=>{\r\n  var bac_avgs = []\r\n  var bac_paths = []\r\n  var bac_student = []\r\n  var bac_years = []\r\n  var bac_feedbacks = []\r\n  var bac_id = []\r\n\r\n  result.sort((a,b)=> {\r\n    return  parseFloat(b.bac_avg) - parseFloat(a.bac_avg)\r\n  })\r\n\r\n  for(var i=0; i < result.length;i++){\r\n    \r\n    bac_avgs.push(result[i]['bac_avg'])      \r\n    bac_paths.push(this.findStudentPath(result[i]['highshcool_path']))\r\n    bac_student.push(result[i]['student_id'])\r\n    bac_years.push(result[i]['bac_year'])\r\n    bac_feedbacks.push(result[i]['bac_feedback'])\r\n    bac_id.push(result[i]['bac_id'])\r\n  \r\n  }\r\n\r\n  this.setState(\r\n    {\r\n      bac_avgs: [...bac_avgs],\r\n      bac_paths: [...bac_paths],\r\n      bac_student: [...bac_student],\r\n      bac_years: [...bac_years],\r\n      bac_feedbacks: [...bac_feedbacks],\r\n      bac_id: [...bac_id] \r\n\r\n    }\r\n  )\r\n \r\n}\r\n\r\ngetadmisperyear = (result)=>{\r\n  var years = this.state.years\r\n  var temp = []\r\n  var temp_ajrn = []\r\n  for(var i=0; i < years.length;i++){\r\n    var count_total = 0\r\n    var count_ajr = 0\r\n    for(var j=0; j < result.length;j++){\r\n    if(result[j].scholar_year == years[i]){\r\n      count_total++\r\n      if(result[j].statu =='AjournÃ©'){\r\n        count_ajr++\r\n      }\r\n    }   \r\n    }  \r\n    temp.push(\r\n      ((count_total-count_ajr)/count_total).toFixed(4) *100\r\n    )\r\n    temp_ajrn.push(\r\n      (count_ajr/count_total).toFixed(4) *100\r\n    )\r\n  }\r\n\r\n  this.setState({\r\n    'admis_years' : [...temp],\r\n    'ajrn_years' : [...temp_ajrn]\r\n  })\r\n} \r\n\r\n/*\r\n  end of  filter and calculate Api results\r\n*/\r\n\r\n\r\n/*\r\n  Connections to DNA API\r\n*/\r\nconnectToBestCourses = ()=>{\r\n  fetch('http://127.0.0.1:8000/best_courses/').\r\nthen(res => res.json()).\r\nthen(\r\n  result =>{\r\n    this.calculatebestcourses(result)\r\n   \r\n  }\r\n\r\n  \r\n)\r\n}\r\n\r\nconnectToBac = ()=>{\r\n  fetch('http://127.0.0.1:8000/bac/').\r\n  then(res => res.json()).\r\n  then(\r\n    result =>{\r\n      this.getbestbacavg(result)  \r\n      this.calculatepopularfield(result)\r\n     \r\n    }\r\n  )\r\n}\r\n\r\nconnectToCourseProfile = () =>{\r\n  fetch('http://127.0.0.1:8000/course_profile/').\r\n  then(res => res.json()).\r\n  then(\r\n    result =>{\r\n  \r\n      this.calculatebestbacfield(result)\r\n      this.calculatebestgender(result) \r\n    \r\n    }\r\n  )\r\n}\r\n\r\nconnectToCourseProfileBydate = () =>{\r\n  var date = (this.state.years.indexOf(this.state.current_year)+1)==0 ? 1: (this.state.years.indexOf(this.state.current_year)+1)\r\n\r\n  fetch('http://127.0.0.1:8000/course_profile/?date='+date).\r\n  then(res => res.json()).\r\n  then(\r\n    result =>{\r\n  \r\n      this.calculatebestcourseyear(result)    \r\n    }\r\n  )\r\n}\r\n\r\nconnectToScholarYear = ()=>{\r\n  fetch('http://127.0.0.1:8000/scholar_years/').\r\n  then(res => res.json()).\r\n  then(\r\n    result =>{\r\n      this.getscholaryears(result)    \r\n    }\r\n  )\r\n}\r\n\r\nconnectToStudentInfo = ()=>{\r\n  fetch('http://127.0.0.1:8000/student_info/').\r\n  then(res => res.json()).\r\n  then(\r\n    result =>{\r\n      this.getadmisperyear(result)    \r\n    }\r\n  )\r\n}\r\n\r\n\r\n/*\r\n  END OfConnections to DNA API\r\n*/\r\n\r\n\r\ncomponentDidMount() {\r\n  this.connectToScholarYear()\r\n  this.connectToBestCourses()\r\n  this.connectToBac()\r\n  this.connectToCourseProfile()  \r\n  this.connectToCourseProfileBydate()\r\n  this.connectToStudentInfo () \r\n}\r\n\r\n/*\r\n  handle events\r\n*/\r\nhandleClickYear = (e)=>{\r\n  let year = e.target.text\r\n  \r\n  this.setState({\r\n    current_year : parseInt(year),\r\n  })\r\n\r\n  this.connectToCourseProfileBydate()\r\n}\r\n\r\n\r\n\r\ndisplayYears = ()=>{\r\n \r\n  const yearsList = this.state.years.map((year) =>\r\n  <li className=\"list-group-item\">\r\n    <a className=\"nav-link text-white\" href=\"#year-analysis\"  onClick={this.handleClickYear}>\r\n    {year}\r\n    </a>\r\n  </li>\r\n);\r\nreturn yearsList\r\n}\r\n\r\ndiplayBestBacresults = ()=>{\r\n  var bac_list  = []\r\n  let bac_avgs = [...this.state.bac_avgs]\r\n  var bac_paths = [...this.state.bac_paths]\r\n  var bac_student = [...this.state.bac_student]\r\n  var bac_years = [...this.state.bac_years]\r\n  var bac_feedbacks = [...this.state.bac_feedbacks]\r\n  var bac_id = [...this.state.bac_id]\r\n  \r\n  for(var i=0;i<10;i++){\r\n    bac_list.push(\r\n    <li id=\"bac_list_group_item\" className=\"list-group-item\">\r\n    <div id=\"#bac_ids\">\r\n     <p> student : {bac_student[i]}</p>\r\n      <p> id: {bac_id[i]}</p>\r\n    </div>\r\n\r\n    <div id=\"#bac_infos\">\r\n      <p>Avg: {bac_avgs[i]}</p>\r\n      <p>{bac_feedbacks[i]}</p>\r\n    </div>\r\n\r\n    <div id=\"bac_year\">      \r\n      <p>Year: {bac_years[i]}</p> \r\n      <p>Path: {bac_paths[i]}</p>\r\n    </div> \r\n    </li>\r\n    )\r\n  }\r\n\r\n  return bac_list\r\n \r\n}\r\n\r\n/*\r\n   end of handle events\r\n*/\r\n\r\n\r\n  render(){\r\n    const cardWidth = \"22rem\"\r\n    const greenBarColor = \"#18BD9B\"\r\n    const redBarColor = \"#E54787\"\r\n    let yearsList = this.displayYears()\r\n    let bacList = this.diplayBestBacresults()\r\n\r\n    return (\r\n      <div className=\"Dashboard\">\r\n        <h1 className=\"text-center\">Dashboard</h1>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n\r\n            <article className=\"col-md-8\">\r\n              {\r\n                /*generale info section start*/\r\n              }\r\n              <section>\r\n                <header className=\"text-center\"><h3>General Info</h3></header>\r\n                  <div id=\"general-info\">\r\n                  <Card id=\"best-courses\"  style={{ width: cardWidth}}>\r\n                    <Card.Body>\r\n                        <HorizontalBar\r\n                               \r\n            \r\n                        data={{ labels : this.state.best_courses.slice(0,5),  \r\n                                datasets: [\r\n                                  { \r\n                                    label: \"Top 5 Admis Percentage since 2010 \",\r\n                                    backgroundColor: greenBarColor,\r\n                                    data : this.state.best_courses_winrate.slice(0,5)\r\n                                     }\r\n                                ]\r\n                        }}                      \r\n\r\n                        width={100}\r\n                        height={200}\r\n                        options={{ maintainAspectRatio: false }}\r\n                        />\r\n                    </Card.Body>\r\n                  </Card>\r\n\r\n\r\n                  <Card id=\"popular-bacfield\"  style={{ width: cardWidth }}>\r\n                    <Card.Body>\r\n                    <HorizontalBar                              \r\n                      data={{ labels : this.state.popular_fields,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Most popular bac field since 2010\",\r\n                                  backgroundColor: greenBarColor,\r\n                                  data : this.state.popular_fields_number\r\n                                  }\r\n                              ]\r\n                      }}                      \r\n\r\n                      width={100}\r\n                      height={200}\r\n                      options={{ maintainAspectRatio: false }}\r\n                      />\r\n                    </Card.Body>\r\n                  </Card>\r\n                  <Card id=\"best-bacfield\"  style={{ width: cardWidth }}>\r\n                    <Card.Body>\r\n                    <HorizontalBar                              \r\n                      data={{ labels : this.state.best_bacfield,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Top  bac field since 2010\",\r\n                                  backgroundColor: greenBarColor,\r\n                                  data : this.state.best_bacfield_winrate\r\n                                  }\r\n                              ]\r\n                      }}                      \r\n\r\n                      width={100}\r\n                      height={200}\r\n                      options={{ maintainAspectRatio: false }}\r\n                      />\r\n                    </Card.Body>\r\n                  </Card>\r\n                  <Card id=\"best-gender\"  style={{ width: cardWidth }}>\r\n                    <Card.Body>\r\n                    <HorizontalBar                              \r\n                      data={{ labels : this.state.best_gender,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Male Vs Female Admis since  2010\",\r\n                                  backgroundColor: greenBarColor,\r\n                                  data : this.state.best_gender_winrate\r\n                                  }\r\n                              ]\r\n                      }}                      \r\n\r\n                      width={100}\r\n                      height={200}\r\n                      options={{ maintainAspectRatio: false }}\r\n                      />\r\n                    </Card.Body>\r\n                  </Card>\r\n                  <Card>\r\n                    <Card.Body>\r\n                    <Bar\r\n                        data={{ labels : this.state.years,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Admis\",\r\n                                  backgroundColor: greenBarColor,\r\n                                  data : this.state.admis_years\r\n                                  },\r\n                                  { \r\n                                  label: \"Ajourne\",\r\n                                  backgroundColor: redBarColor,\r\n                                  data : this.state.ajrn_years\r\n                                  }\r\n                              ]\r\n                        }}\r\n                        width={100}\r\n                        height={80}\r\n                       />         \r\n                    </Card.Body>\r\n                  </Card>\r\n                  </div>              \r\n              </section>\r\n              {\r\n                /* generale info section end */\r\n              }\r\n\r\n              {\r\n                /* year analysis section start */\r\n              }\r\n              <section>\r\n                <header className=\"text-center\"><h3>Years Analysis</h3></header>\r\n                <div id=\"year-analysis\">\r\n                <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n                  <div className=\"collapse navbar-collapse\">                   \r\n                    <ul id=\"years_list\" className=\"navbar-nav\">\r\n                     {yearsList}\r\n                    </ul>\r\n                  </div>\r\n                </nav>\r\n                <div>\r\n                <Card id=\"years_analysis_card\">\r\n                    <Card.Body>\r\n                    <Card>\r\n                    <Card.Body>\r\n                      <Bar\r\n                        data={{ labels : this.state.year_cours.slice(0,5),  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"best modules for \"+this.state.current_year,\r\n                                  backgroundColor: greenBarColor,\r\n                                  data : this.state.year_winrate.slice(0,5)\r\n                                  }\r\n                              ]\r\n                        }}\r\n                        width={100}\r\n                        height={80}\r\n                       />       \r\n                    </Card.Body>\r\n                  </Card>  \r\n\r\n                   <Card>\r\n                    <Card.Body>\r\n                    <Bar\r\n                        data={{ labels : this.state.year_cours_worst.slice(0,5),  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"worste modules for \"+this.state.current_year,\r\n                                  backgroundColor: redBarColor,\r\n                                  data : this.state.year_winrate_worst.slice(0,5)\r\n                                  }\r\n                              ]\r\n                        }}\r\n                        width={100}\r\n                        height={80}\r\n                       />         \r\n                    </Card.Body>\r\n                  </Card> \r\n\r\n                   <Card>\r\n                    <Card.Body>\r\n                    <Bar\r\n                        data={{ labels : this.state.best_gender,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Male Vs Female Admis since  2010\",\r\n                                  backgroundColor: greenBarColor,\r\n                                  data : this.state.best_gender_winrate\r\n                                  }\r\n                              ]\r\n                        }}\r\n                        width={100}\r\n                        height={80}\r\n                       />          \r\n                    </Card.Body>\r\n                  </Card>         \r\n\r\n\r\n                  <Card>\r\n                    <Card.Body>\r\n                    <Bar\r\n                        data={{ labels : this.state.best_gender,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Male Vs Female Admis since  2010\",\r\n                                  backgroundColor: greenBarColor,\r\n                                  data : this.state.best_gender_winrate\r\n                                  }\r\n                              ]\r\n                        }}\r\n                        width={100}\r\n                        height={80}\r\n                       />         \r\n                    </Card.Body>\r\n                  </Card> \r\n                 \r\n                    </Card.Body>\r\n                  </Card>\r\n                </div>                \r\n                </div>\r\n              </section>                \r\n              {\r\n                /* year analysis section end */\r\n              }\r\n\r\n            </article>\r\n\r\n            <aside className=\"col-md-4\">\r\n            <header className=\"text-center\"><h3>Best  10 Bac Avg since 2010</h3></header>\r\n\r\n              <div>\r\n              <Card  style={{ width: \"25rem\" }}>\r\n                    <Card.Body>\r\n                      <ul id=\"bac_list\" className=\"list-group\">\r\n                      {bacList}\r\n                      </ul>      \r\n                    </Card.Body>\r\n                  </Card> \r\n              </div>\r\n            </aside>\r\n\r\n          </div>    \r\n        </div>\r\n      </div>\r\n      \r\n      \r\n    );\r\n  }\r\n \r\n}\r\n\r\nexport default  Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}