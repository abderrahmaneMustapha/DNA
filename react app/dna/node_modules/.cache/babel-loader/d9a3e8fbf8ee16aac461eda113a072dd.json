{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n'use strict';\n\nvar Danger = require('./Danger');\n\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactPerf = require('./ReactPerf');\n\nvar setInnerHTML = require('./setInnerHTML');\n\nvar setTextContent = require('./setTextContent');\n\nvar invariant = require('fbjs/lib/invariant');\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\n\n\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n  // fix render order error in safari\n  // IE8 will throw error when index out of list size.\n  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);\n  parentNode.insertBefore(childNode, beforeChild);\n}\n/**\n * Operations for updating with DOM children.\n */\n\n\nvar DOMChildrenOperations = {\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n  updateTextContent: setTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function (updates, markupList) {\n    var update; // Mapping from parent IDs to initial child orderings.\n\n    var initialChildren = null; // List of children that will be moved or removed.\n\n    var updatedChildren = null;\n\n    for (var i = 0; i < updates.length; i++) {\n      update = updates[i];\n\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup; // markupList is either a list of markup or just a list of elements\n\n    if (markupList.length && typeof markupList[0] === 'string') {\n      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n    } else {\n      renderedMarkup = markupList;\n    } // Remove updated children first so that `toIndex` is consistent.\n\n\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      update = updates[k];\n\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);\n          break;\n\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n          break;\n\n        case ReactMultiChildUpdateTypes.SET_MARKUP:\n          setInnerHTML(update.parentNode, update.content);\n          break;\n\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(update.parentNode, update.content);\n          break;\n\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n};\nReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {\n  updateTextContent: 'updateTextContent'\n});\nmodule.exports = DOMChildrenOperations;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/DOMChildrenOperations.js"],"names":["Danger","require","ReactMultiChildUpdateTypes","ReactPerf","setInnerHTML","setTextContent","invariant","insertChildAt","parentNode","childNode","index","beforeChild","childNodes","length","item","insertBefore","DOMChildrenOperations","dangerouslyReplaceNodeWithMarkup","updateTextContent","processUpdates","updates","markupList","update","initialChildren","updatedChildren","i","type","MOVE_EXISTING","REMOVE_NODE","updatedIndex","fromIndex","updatedChild","parentID","process","env","NODE_ENV","undefined","push","renderedMarkup","dangerouslyRenderMarkup","j","removeChild","k","INSERT_MARKUP","markupIndex","toIndex","SET_MARKUP","content","TEXT_CONTENT","measureMethods","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,0BAA0B,GAAGD,OAAO,CAAC,8BAAD,CAAxC;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIG,YAAY,GAAGH,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAII,cAAc,GAAGJ,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,oBAAD,CAAvB;AAEA;;;;;;;;;;AAQA,SAASM,aAAT,CAAuBC,UAAvB,EAAmCC,SAAnC,EAA8CC,KAA9C,EAAqD;AACnD;AACA;AACA;AACA;AAEA;AACA;AACA,MAAIC,WAAW,GAAGD,KAAK,IAAIF,UAAU,CAACI,UAAX,CAAsBC,MAA/B,GAAwC,IAAxC,GAA+CL,UAAU,CAACI,UAAX,CAAsBE,IAAtB,CAA2BJ,KAA3B,CAAjE;AAEAF,EAAAA,UAAU,CAACO,YAAX,CAAwBN,SAAxB,EAAmCE,WAAnC;AACD;AAED;;;;;AAGA,IAAIK,qBAAqB,GAAG;AAE1BC,EAAAA,gCAAgC,EAAEjB,MAAM,CAACiB,gCAFf;AAI1BC,EAAAA,iBAAiB,EAAEb,cAJO;;AAM1B;;;;;;;;AAQAc,EAAAA,cAAc,EAAE,UAAUC,OAAV,EAAmBC,UAAnB,EAA+B;AAC7C,QAAIC,MAAJ,CAD6C,CAE7C;;AACA,QAAIC,eAAe,GAAG,IAAtB,CAH6C,CAI7C;;AACA,QAAIC,eAAe,GAAG,IAAtB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACP,MAA5B,EAAoCY,CAAC,EAArC,EAAyC;AACvCH,MAAAA,MAAM,GAAGF,OAAO,CAACK,CAAD,CAAhB;;AACA,UAAIH,MAAM,CAACI,IAAP,KAAgBxB,0BAA0B,CAACyB,aAA3C,IAA4DL,MAAM,CAACI,IAAP,KAAgBxB,0BAA0B,CAAC0B,WAA3G,EAAwH;AACtH,YAAIC,YAAY,GAAGP,MAAM,CAACQ,SAA1B;AACA,YAAIC,YAAY,GAAGT,MAAM,CAACd,UAAP,CAAkBI,UAAlB,CAA6BiB,YAA7B,CAAnB;AACA,YAAIG,QAAQ,GAAGV,MAAM,CAACU,QAAtB;AAEA,SAACD,YAAD,GAAgBE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC7B,SAAS,CAAC,KAAD,EAAQ,gEAAgE,gEAAhE,GAAmI,mEAAnI,GAAyM,mEAAzM,GAA+Q,oEAA/Q,GAAsV,qBAA9V,EAAqXuB,YAArX,EAAmYG,QAAnY,CAAjD,GAAgc1B,SAAS,CAAC,KAAD,CAAzd,GAAme8B,SAAne;AAEAb,QAAAA,eAAe,GAAGA,eAAe,IAAI,EAArC;AACAA,QAAAA,eAAe,CAACS,QAAD,CAAf,GAA4BT,eAAe,CAACS,QAAD,CAAf,IAA6B,EAAzD;AACAT,QAAAA,eAAe,CAACS,QAAD,CAAf,CAA0BH,YAA1B,IAA0CE,YAA1C;AAEAP,QAAAA,eAAe,GAAGA,eAAe,IAAI,EAArC;AACAA,QAAAA,eAAe,CAACa,IAAhB,CAAqBN,YAArB;AACD;AACF;;AAED,QAAIO,cAAJ,CAzB6C,CA0B7C;;AACA,QAAIjB,UAAU,CAACR,MAAX,IAAqB,OAAOQ,UAAU,CAAC,CAAD,CAAjB,KAAyB,QAAlD,EAA4D;AAC1DiB,MAAAA,cAAc,GAAGtC,MAAM,CAACuC,uBAAP,CAA+BlB,UAA/B,CAAjB;AACD,KAFD,MAEO;AACLiB,MAAAA,cAAc,GAAGjB,UAAjB;AACD,KA/B4C,CAiC7C;;;AACA,QAAIG,eAAJ,EAAqB;AACnB,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,eAAe,CAACX,MAApC,EAA4C2B,CAAC,EAA7C,EAAiD;AAC/ChB,QAAAA,eAAe,CAACgB,CAAD,CAAf,CAAmBhC,UAAnB,CAA8BiC,WAA9B,CAA0CjB,eAAe,CAACgB,CAAD,CAAzD;AACD;AACF;;AAED,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,OAAO,CAACP,MAA5B,EAAoC6B,CAAC,EAArC,EAAyC;AACvCpB,MAAAA,MAAM,GAAGF,OAAO,CAACsB,CAAD,CAAhB;;AACA,cAAQpB,MAAM,CAACI,IAAf;AACE,aAAKxB,0BAA0B,CAACyC,aAAhC;AACEpC,UAAAA,aAAa,CAACe,MAAM,CAACd,UAAR,EAAoB8B,cAAc,CAAChB,MAAM,CAACsB,WAAR,CAAlC,EAAwDtB,MAAM,CAACuB,OAA/D,CAAb;AACA;;AACF,aAAK3C,0BAA0B,CAACyB,aAAhC;AACEpB,UAAAA,aAAa,CAACe,MAAM,CAACd,UAAR,EAAoBe,eAAe,CAACD,MAAM,CAACU,QAAR,CAAf,CAAiCV,MAAM,CAACQ,SAAxC,CAApB,EAAwER,MAAM,CAACuB,OAA/E,CAAb;AACA;;AACF,aAAK3C,0BAA0B,CAAC4C,UAAhC;AACE1C,UAAAA,YAAY,CAACkB,MAAM,CAACd,UAAR,EAAoBc,MAAM,CAACyB,OAA3B,CAAZ;AACA;;AACF,aAAK7C,0BAA0B,CAAC8C,YAAhC;AACE3C,UAAAA,cAAc,CAACiB,MAAM,CAACd,UAAR,EAAoBc,MAAM,CAACyB,OAA3B,CAAd;AACA;;AACF,aAAK7C,0BAA0B,CAAC0B,WAAhC;AACE;AACA;AAfJ;AAiBD;AACF;AA1EyB,CAA5B;AA8EAzB,SAAS,CAAC8C,cAAV,CAAyBjC,qBAAzB,EAAgD,uBAAhD,EAAyE;AACvEE,EAAAA,iBAAiB,EAAE;AADoD,CAAzE;AAIAgC,MAAM,CAACC,OAAP,GAAiBnC,qBAAjB","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar Danger = require('./Danger');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\nvar ReactPerf = require('./ReactPerf');\n\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n\n  // fix render order error in safari\n  // IE8 will throw error when index out of list size.\n  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);\n\n  parentNode.insertBefore(childNode, beforeChild);\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n\n  updateTextContent: setTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function (updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n\n    for (var i = 0; i < updates.length; i++) {\n      update = updates[i];\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n\n        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;\n\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup;\n    // markupList is either a list of markup or just a list of elements\n    if (markupList.length && typeof markupList[0] === 'string') {\n      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n    } else {\n      renderedMarkup = markupList;\n    }\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      update = updates[k];\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.SET_MARKUP:\n          setInnerHTML(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n\n};\n\nReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {\n  updateTextContent: 'updateTextContent'\n});\n\nmodule.exports = DOMChildrenOperations;"]},"metadata":{},"sourceType":"script"}