{"ast":null,"code":"/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\n\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar ReactReconciler = require('./ReactReconciler');\n\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar flattenChildren = require('./flattenChildren');\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\n\n\nvar updateDepth = 0;\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\n\nvar updateQueue = [];\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\n\nvar markupQueue = [];\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\n\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\n\n\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\n\n\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n/**\n * Enqueues setting the markup of a node.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @private\n */\n\n\nfunction enqueueSetMarkup(parentID, markup) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    markupIndex: null,\n    content: markup,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\n\n\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    content: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\n\n\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\n\n\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\n\n\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {\n      var nextChildren;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n        }\n      }\n\n      nextChildren = flattenChildren(nextNestedChildrenElements);\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name]; // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n\n      try {\n        var prevChildren = this._renderedChildren; // Remove any rendered children.\n\n        ReactChildReconciler.unmountChildren(prevChildren); // TODO: The setTextContent operation should be enough\n\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChild(prevChildren[name]);\n          }\n        } // Set new text content.\n\n\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      updateDepth++;\n      var errorThrown = true;\n\n      try {\n        var prevChildren = this._renderedChildren; // Remove any rendered children.\n\n        ReactChildReconciler.unmountChildren(prevChildren);\n\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n\n        this.setMarkup(nextMarkup);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n\n      try {\n        this._updateChildren(nextNestedChildrenElements, transaction, context);\n\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n\n      this._renderedChildren = nextChildren;\n\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n\n      var name; // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n\n      var lastIndex = 0;\n      var nextIndex = 0;\n\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n\n            this._unmountChild(prevChild);\n          } // The child must be instantiated before it's mounted.\n\n\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n\n        nextIndex++;\n      } // Remove children that are no longer present.\n\n\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChild(prevChildren[name]);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Sets this markup string.\n     *\n     * @param {string} markup Markup to set.\n     * @protected\n     */\n    setMarkup: function (markup) {\n      enqueueSetMarkup(this._rootNodeID, markup);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n  }\n};\nmodule.exports = ReactMultiChild;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/node_modules/react-holder/node_modules/react/lib/ReactMultiChild.js"],"names":["ReactComponentEnvironment","require","ReactMultiChildUpdateTypes","ReactCurrentOwner","ReactReconciler","ReactChildReconciler","flattenChildren","updateDepth","updateQueue","markupQueue","enqueueInsertMarkup","parentID","markup","toIndex","push","parentNode","type","INSERT_MARKUP","markupIndex","content","fromIndex","enqueueMove","MOVE_EXISTING","enqueueRemove","REMOVE_NODE","enqueueSetMarkup","SET_MARKUP","enqueueTextContent","textContent","TEXT_CONTENT","processQueue","length","processChildrenUpdates","clearQueue","ReactMultiChild","Mixin","_reconcilerInstantiateChildren","nestedChildren","transaction","context","process","env","NODE_ENV","_currentElement","current","_owner","instantiateChildren","_reconcilerUpdateChildren","prevChildren","nextNestedChildrenElements","nextChildren","updateChildren","mountChildren","children","_renderedChildren","mountImages","index","name","hasOwnProperty","child","rootID","_rootNodeID","mountImage","mountComponent","_mountIndex","updateTextContent","nextContent","errorThrown","unmountChildren","_unmountChild","setTextContent","updateMarkup","nextMarkup","_unmountChildByName","setMarkup","_updateChildren","lastIndex","nextIndex","prevChild","nextChild","moveChild","Math","max","_mountChildByNameAtIndex","renderedChildren","createChild","removeChild","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar flattenChildren = require('./flattenChildren');\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the markup of a node.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction enqueueSetMarkup(parentID, markup) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    markupIndex: null,\n    content: markup,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    content: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {\n      var nextChildren;\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements);\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChild(prevChildren[name]);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        this.setMarkup(nextMarkup);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildrenElements, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChild(prevChild);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChild(prevChildren[name]);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Sets this markup string.\n     *\n     * @param {string} markup Markup to set.\n     * @protected\n     */\n    setMarkup: function (markup) {\n      enqueueSetMarkup(this._rootNodeID, markup);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;"]},"metadata":{},"sourceType":"script"}