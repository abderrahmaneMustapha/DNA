{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\icom\\\\myProjects\\\\DNA\\\\react app\\\\dna\\\\src\\\\dashboard\\\\Dashboard.js\";\nimport React from 'react';\nimport './dashboard.css';\nimport Card from 'react-bootstrap/Card';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { HorizontalBar, defaults, Bar } from 'react-chartjs-2';\ndefaults.global.defaultFontColor = '#E7E7EB';\ndefaults.scale.ticks.beginAtZero = true;\ndefaults.scale.ticks.suggestedMax = 100;\nvar bac_fields = [{\n  \"path_id\": 1,\n  \"path_name\": \"S\"\n}, {\n  \"path_id\": 2,\n  \"path_name\": \"M\"\n}, {\n  \"path_id\": 4,\n  \"path_name\": \"TM\"\n}, {\n  \"path_id\": 5,\n  \"path_name\": \"other\"\n}];\n\nclass Dashboard extends React.Component {\n  constructor() {\n    super();\n\n    this.calculatebestcourses = result => {\n      var temp = [];\n\n      for (var i = 0; i < result.length; i++) {\n        var id = result[i][\"cours_id\"];\n        var admis = result[i].admis_number;\n        var total = result[i].student_number;\n        temp.push({\n          \"id\": id,\n          \"winrate\": (admis / total).toFixed(4) * 100\n        });\n      }\n\n      temp.sort((a, b) => {\n        return b.winrate - a.winrate;\n      });\n      var best_temp = [];\n      var winrate_temp = [];\n\n      for (var i = 0; i < temp.length; i++) {\n        best_temp.push(temp[i]['id']);\n        winrate_temp.push(temp[i]['winrate']);\n      }\n\n      this.setState({\n        best_courses: [...best_temp],\n        best_courses_winrate: [...winrate_temp]\n      });\n    };\n\n    this.calculatepopularfield = result => {\n      var temp = [];\n\n      for (var i = 0; i < bac_fields.length; i++) {\n        var count = 0;\n\n        for (var j = 0; j < result.length; j++) {\n          if (bac_fields[i]['path_id'] == result[j]['highshcool_path']) {\n            count++;\n          }\n        }\n\n        temp.push({\n          'bac_path': bac_fields[i]['path_name'],\n          'percentage': (count / result.length).toFixed(4) * 100\n        });\n      }\n\n      temp.sort((a, b) => {\n        return b.percentage - a.percentage;\n      });\n      let field_temp = [];\n      let percentage_temp = [];\n\n      for (var i = 0; i < temp.length; i++) {\n        field_temp.push(temp[i]['bac_path']);\n        percentage_temp.push(temp[i]['percentage']);\n      }\n\n      this.setState({\n        popular_fields: [...field_temp],\n        popular_fields_number: [...percentage_temp]\n      });\n    };\n\n    this.calculatebestbacfield = result => {\n      var temp = [];\n\n      for (var i = 0; i < bac_fields.length; i++) {\n        var count_student = 0;\n        var count_admis = 0;\n\n        for (var j = 0; j < result.length; j++) {\n          if (bac_fields[i]['path_id'] == result[j]['path']) {\n            count_student += result[j]['student_number'];\n            count_admis += result[j]['admis_number'];\n          }\n        }\n\n        temp.push({\n          'bac_path': bac_fields[i]['path_name'],\n          'winrate': (count_admis / count_student).toFixed(4) * 100\n        });\n      }\n\n      temp.sort((a, b) => {\n        return b.winrate - a.winrate;\n      });\n      let field_temp = [];\n      let winrate_temp = [];\n\n      for (var i = 0; i < temp.length; i++) {\n        field_temp.push(temp[i]['bac_path']);\n        winrate_temp.push(temp[i]['winrate']);\n      }\n\n      this.setState({\n        best_bacfield: [...field_temp],\n        best_bacfield_winrate: [...winrate_temp]\n      });\n    };\n\n    this.calculatebestgender = result => {\n      let temp = [];\n      var total_admis_student = 0;\n      var total_male = 0;\n      var total_female = 0;\n\n      for (var i = 0; i < result.length; i++) {\n        total_admis_student += result[i]['admis_number'];\n        total_male += result[i]['m_admis_number'];\n        total_female += result[i].admis_number - result[i].m_admis_number;\n      }\n\n      temp.push({\n        'gender': 'Male',\n        'winrate': (total_male / total_admis_student).toFixed(4) * 100\n      });\n      temp.push({\n        'gender': 'Female',\n        'winrate': (total_female / total_admis_student).toFixed(4) * 100\n      });\n      temp.sort((a, b) => {\n        return b.winrate - a.winrate;\n      });\n      let gender_temp = [];\n      let winrate_temp = [];\n\n      for (var i = 0; i < temp.length; i++) {\n        gender_temp.push(temp[i]['gender']);\n        winrate_temp.push(temp[i]['winrate']);\n      }\n\n      this.setState({\n        best_gender: [...gender_temp],\n        best_gender_winrate: [...winrate_temp]\n      });\n    };\n\n    this.getscholaryears = result => {\n      let temp = [];\n\n      for (var i = 0; i < result.length; i++) {\n        temp.push(result[i]['scholar_year']);\n      }\n\n      console.log(temp);\n      this.setState({\n        years: [...temp]\n      });\n    };\n\n    this.connectToBestCourses = () => {\n      fetch('http://127.0.0.1:8000/best_courses/').then(res => res.json()).then(result => {\n        this.calculatebestcourses(result);\n      });\n    };\n\n    this.connectToBac = () => {\n      fetch('http://127.0.0.1:8000/bac/').then(res => res.json()).then(result => {\n        this.calculatepopularfield(result);\n      });\n    };\n\n    this.connectToCourseProfile = () => {\n      fetch('http://127.0.0.1:8000/course_profile/').then(res => res.json()).then(result => {\n        this.calculatebestbacfield(result);\n        this.calculatebestgender(result);\n      });\n    };\n\n    this.connectToScholarYear = () => {\n      fetch('http://127.0.0.1:8000/scholar_years/').then(res => res.json()).then(result => {\n        this.getscholaryears(result);\n      });\n    };\n\n    this.handleClickYear = e => {\n      let year = e.target.text;\n      this.setState({\n        current_year: year\n      });\n    };\n\n    this.displayYears = () => {\n      var id = \"years_list\";\n      const yearsList = this.state.years.map(year => React.createElement(\"li\", {\n        className: \"nav-item active\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        class: \"nav-link text-white\",\n        href: \"#years_analysis_card\",\n        onClick: this.handleClickYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, year)));\n      return yearsList;\n    };\n\n    this.state = {\n      best_courses: [],\n      best_courses_winrate: [],\n      popular_fields: [],\n      popular_fields_number: [],\n      best_bacfield: [],\n      best_bacfield_winrate: [],\n      best_gender: [],\n      best_gender_winrate: [],\n      years: [],\n      current_year: 2010,\n      crrent_level: 1,\n      current_field: \"MIAS\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.connectToBestCourses();\n    this.connectToBac();\n    this.connectToCourseProfile();\n    this.connectToScholarYear();\n  }\n\n  render() {\n    const cardWidth = \"22rem\";\n    const barColor = \"#18BD9B\";\n    let yearsList = this.displayYears();\n    return React.createElement(\"div\", {\n      className: \"Dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, React.createElement(\"article\", {\n      className: \"col-md-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"General Info\"), React.createElement(\"div\", {\n      id: \"general-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(Card, {\n      id: \"best-courses\",\n      style: {\n        width: cardWidth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(HorizontalBar, {\n      data: {\n        labels: this.state.best_courses.slice(0, 5),\n        datasets: [{\n          label: \"Top 5 Admis Percentage since 2010 \",\n          backgroundColor: barColor,\n          data: this.state.best_courses_winrate.slice(0, 5)\n        }]\n      },\n      width: 100,\n      height: 200,\n      options: {\n        maintainAspectRatio: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      id: \"popular-bacfield\",\n      style: {\n        width: cardWidth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(HorizontalBar, {\n      data: {\n        labels: this.state.popular_fields,\n        datasets: [{\n          label: \"Most popular bac field since 2010\",\n          backgroundColor: barColor,\n          data: this.state.popular_fields_number\n        }]\n      },\n      width: 100,\n      height: 200,\n      options: {\n        maintainAspectRatio: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      id: \"best-bacfield\",\n      style: {\n        width: cardWidth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(HorizontalBar, {\n      data: {\n        labels: this.state.best_bacfield,\n        datasets: [{\n          label: \"Top  bac field since 2010\",\n          backgroundColor: barColor,\n          data: this.state.best_bacfield_winrate\n        }]\n      },\n      width: 100,\n      height: 200,\n      options: {\n        maintainAspectRatio: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      id: \"best-gender\",\n      style: {\n        width: cardWidth\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(HorizontalBar, {\n      data: {\n        labels: this.state.best_gender,\n        datasets: [{\n          label: \"Male Vs Female Admis since  2010\",\n          backgroundColor: barColor,\n          data: this.state.best_gender_winrate\n        }]\n      },\n      width: 100,\n      height: 200,\n      options: {\n        maintainAspectRatio: false\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }))))), React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"Year Analysis\"), React.createElement(\"div\", {\n      id: \"year-analysis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, React.createElement(\"nav\", {\n      className: \"navbar navbar-expand-lg navbar-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"collapse navbar-collapse\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      id: \"years_list\",\n      className: \"navbar-nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, yearsList))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(Card, {\n      id: \"years_analysis_card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: {\n        labels: this.state.best_gender,\n        datasets: [{\n          label: \"best modules for\" + this.setState,\n          backgroundColor: barColor,\n          data: this.state.best_gender_winrate\n        }]\n      },\n      width: 100,\n      height: 80,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: {\n        labels: this.state.best_gender,\n        datasets: [{\n          label: \"Male Vs Female Admis since  2010\",\n          backgroundColor: barColor,\n          data: this.state.best_gender_winrate\n        }]\n      },\n      width: 100,\n      height: 80,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: {\n        labels: this.state.best_gender,\n        datasets: [{\n          label: \"Male Vs Female Admis since  2010\",\n          backgroundColor: barColor,\n          data: this.state.best_gender_winrate\n        }]\n      },\n      width: 100,\n      height: 80,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }))), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, React.createElement(Bar, {\n      data: {\n        labels: this.state.best_gender,\n        datasets: [{\n          label: \"Male Vs Female Admis since  2010\",\n          backgroundColor: barColor,\n          data: this.state.best_gender_winrate\n        }]\n      },\n      width: 100,\n      height: 80,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }))))))))), React.createElement(\"aside\", {\n      className: \"col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/icom/myProjects/DNA/react app/dna/src/dashboard/Dashboard.js"],"names":["React","Card","HorizontalBar","defaults","Bar","global","defaultFontColor","scale","ticks","beginAtZero","suggestedMax","bac_fields","Dashboard","Component","constructor","calculatebestcourses","result","temp","i","length","id","admis","admis_number","total","student_number","push","toFixed","sort","a","b","winrate","best_temp","winrate_temp","setState","best_courses","best_courses_winrate","calculatepopularfield","count","j","percentage","field_temp","percentage_temp","popular_fields","popular_fields_number","calculatebestbacfield","count_student","count_admis","best_bacfield","best_bacfield_winrate","calculatebestgender","total_admis_student","total_male","total_female","m_admis_number","gender_temp","best_gender","best_gender_winrate","getscholaryears","console","log","years","connectToBestCourses","fetch","then","res","json","connectToBac","connectToCourseProfile","connectToScholarYear","handleClickYear","e","year","target","text","current_year","displayYears","yearsList","state","map","crrent_level","current_field","handleClick","bind","componentDidMount","render","cardWidth","barColor","width","labels","slice","datasets","label","backgroundColor","data","maintainAspectRatio"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './dashboard.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { HorizontalBar,defaults,Bar } from 'react-chartjs-2';\r\n\r\ndefaults.global.defaultFontColor = '#E7E7EB';\r\ndefaults.scale.ticks.beginAtZero = true; \r\ndefaults.scale.ticks.suggestedMax = 100\r\n\r\nvar bac_fields = [\r\n  {\r\n    \"path_id\": 1,\r\n    \"path_name\": \"S\"\r\n},\r\n{\r\n    \"path_id\": 2,\r\n    \"path_name\": \"M\"\r\n},\r\n{\r\n    \"path_id\": 4,\r\n    \"path_name\": \"TM\"\r\n},\r\n{\r\n    \"path_id\": 5,\r\n    \"path_name\": \"other\"\r\n}\r\n]\r\n\r\nclass Dashboard extends React.Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      best_courses : [],\r\n      best_courses_winrate: [],\r\n\r\n      popular_fields : [],\r\n      popular_fields_number : [],\r\n\r\n      best_bacfield: [],\r\n      best_bacfield_winrate: [],\r\n\r\n      best_gender: [],\r\n      best_gender_winrate: [],\r\n      \r\n      years : [],\r\n\r\n      current_year : 2010,\r\n      crrent_level: 1,\r\n      current_field:\"MIAS\",\r\n     \r\n\r\n    }\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n\r\n calculatebestcourses = (result)=>{   \r\n  \r\n    var temp = []\r\n    for(var i=0; i< result.length;i++){\r\n      var id = result[i][\"cours_id\"]\r\n      var admis = result[i].admis_number\r\n      var total = result[i].student_number\r\n      temp.push({\"id\":id, \"winrate\": (admis/total).toFixed(4) * 100})\r\n    }\r\n    temp.sort((a,b)=> {\r\n      return b.winrate - a.winrate\r\n    })\r\n    var best_temp = []\r\n    var winrate_temp = []\r\n    for(var i=0; i< temp.length;i++){\r\n      best_temp.push(temp[i]['id'])\r\n      winrate_temp.push(temp[i]['winrate'])\r\n    }\r\n    this.setState({\r\n      best_courses:[...best_temp] ,\r\n      best_courses_winrate: [...winrate_temp],\r\n    })    \r\n\r\n}\r\n\r\ncalculatepopularfield = (result)=>{\r\n  var temp = []\r\n \r\n    \r\n    for(var i=0; i< bac_fields.length;i++){\r\n      var count = 0\r\n      for(var j=0; j<result.length;j++){\r\n        if(bac_fields[i]['path_id'] == result[j]['highshcool_path']){\r\n          count++\r\n        }\r\n      }\r\n      temp.push({\r\n        'bac_path': bac_fields[i]['path_name'],\r\n        'percentage': (count/result.length).toFixed(4) * 100\r\n      })\r\n      \r\n    }\r\n    temp.sort((a,b)=> {\r\n      return b.percentage - a.percentage\r\n    })\r\n    let field_temp = []\r\n    let percentage_temp = []\r\n    for(var i=0; i< temp.length;i++){\r\n      field_temp.push(temp[i]['bac_path'])\r\n      percentage_temp.push(temp[i]['percentage'])\r\n    }\r\n\r\n    this.setState({\r\n      popular_fields : [...field_temp],\r\n      popular_fields_number : [...percentage_temp]\r\n    }) \r\n   \r\n}\r\n\r\n\r\ncalculatebestbacfield = (result)=>{\r\n  var temp = []   \r\n  for(var i=0; i< bac_fields.length;i++){\r\n    var count_student = 0\r\n    var count_admis = 0\r\n    for(var j=0; j<result.length;j++){\r\n      if(bac_fields[i]['path_id'] == result[j]['path']){\r\n        count_student += result[j]['student_number']\r\n        count_admis += result[j]['admis_number']\r\n      }\r\n    }\r\n    temp.push({\r\n      'bac_path': bac_fields[i]['path_name'],\r\n      'winrate': (count_admis/ count_student).toFixed(4) * 100\r\n    })\r\n    \r\n  }\r\n\r\n  temp.sort((a,b)=> {\r\n    return b.winrate - a.winrate\r\n  })\r\n  let field_temp = []\r\n  let winrate_temp = []\r\n  for(var i=0; i< temp.length;i++){\r\n    field_temp.push(temp[i]['bac_path'])\r\n    winrate_temp .push(temp[i]['winrate'])\r\n  }\r\n\r\n  this.setState({\r\n    best_bacfield: [...field_temp],\r\n    best_bacfield_winrate: [...winrate_temp],\r\n  })\r\n}\r\n\r\ncalculatebestgender = (result)=>{\r\n  let temp = []\r\n  var total_admis_student = 0\r\n  var total_male = 0\r\n  var total_female = 0\r\n  \r\n  for(var i=0; i< result.length;i++){\r\n    total_admis_student += result[i]['admis_number']\r\n    total_male += result[i]['m_admis_number']\r\n    total_female +=  (result[i].admis_number - result[i].m_admis_number)\r\n  } \r\n\r\n  temp.push({'gender': 'Male', 'winrate': (total_male / total_admis_student).toFixed(4) * 100})\r\n  temp.push({'gender': 'Female', 'winrate': (total_female/ total_admis_student).toFixed(4) * 100 })\r\n\r\n  temp.sort((a,b)=> {\r\n    return b.winrate - a.winrate\r\n  })\r\n  \r\n  let gender_temp = []\r\n  let winrate_temp = []\r\n  for(var i=0; i< temp.length;i++){\r\n    gender_temp.push(temp[i]['gender'])\r\n    winrate_temp.push(temp[i]['winrate'])\r\n  }  \r\n\r\n  this.setState({\r\n    best_gender: [...gender_temp],\r\n    best_gender_winrate: [... winrate_temp],\r\n  })\r\n  \r\n}\r\n\r\ngetscholaryears = (result)=>{\r\n  let temp = []\r\n  for(var i=0; i< result.length;i++){\r\n     temp.push(result[i]['scholar_year'])\r\n  } \r\n  console.log(temp)\r\n  this.setState({\r\n    years : [...temp]\r\n  })\r\n}\r\n\r\nconnectToBestCourses = ()=>{\r\n  fetch('http://127.0.0.1:8000/best_courses/').\r\nthen(res => res.json()).\r\nthen(\r\n  result =>{\r\n    this.calculatebestcourses(result)\r\n   \r\n  }\r\n)\r\n}\r\n\r\nconnectToBac = ()=>{\r\n  fetch('http://127.0.0.1:8000/bac/').\r\n  then(res => res.json()).\r\n  then(\r\n    result =>{\r\n      this.calculatepopularfield(result)\r\n     \r\n    }\r\n  )\r\n}\r\n\r\nconnectToCourseProfile = () =>{\r\n  fetch('http://127.0.0.1:8000/course_profile/').\r\n  then(res => res.json()).\r\n  then(\r\n    result =>{\r\n      this.calculatebestbacfield(result)\r\n      this.calculatebestgender(result)     \r\n    }\r\n  )\r\n}\r\n\r\nconnectToScholarYear = ()=>{\r\n  fetch('http://127.0.0.1:8000/scholar_years/').\r\n  then(res => res.json()).\r\n  then(\r\n    result =>{\r\n      this.getscholaryears(result)    \r\n    }\r\n  )\r\n}\r\n\r\n\r\ncomponentDidMount() {\r\n  this.connectToBestCourses()\r\n  this.connectToBac()\r\n  this.connectToCourseProfile()\r\n  this.connectToScholarYear()\r\n}\r\nhandleClickYear = (e)=>{\r\n  let year = e.target.text\r\n\r\n  this.setState({\r\n    current_year : year,\r\n  })\r\n\r\n}\r\n\r\ndisplayYears = ()=>{\r\n  var id =  \"years_list\"\r\n  const yearsList = this.state.years.map((year) =>\r\n  <li className=\"nav-item active\">\r\n    <a class=\"nav-link text-white\" href=\"#years_analysis_card\"  onClick={this.handleClickYear}>\r\n    {year}\r\n    </a>\r\n  </li>\r\n);\r\nreturn yearsList\r\n}\r\n\r\n\r\n  render(){\r\n    const cardWidth = \"22rem\"\r\n    const barColor = \"#18BD9B\"\r\n    let yearsList = this.displayYears()\r\n\r\n    return (\r\n      <div className=\"Dashboard\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n\r\n            <article className=\"col-md-8\">\r\n              {\r\n                /*generale info section start*/\r\n              }\r\n              <section>\r\n                <header className=\"text-center\">General Info</header>\r\n                  <div id=\"general-info\">\r\n                  <Card id=\"best-courses\"  style={{ width: cardWidth}}>\r\n                    <Card.Body>\r\n                        <HorizontalBar\r\n                               \r\n            \r\n                        data={{ labels : this.state.best_courses.slice(0,5),  \r\n                                datasets: [\r\n                                  { \r\n                                    label: \"Top 5 Admis Percentage since 2010 \",\r\n                                    backgroundColor: barColor,\r\n                                    data : this.state.best_courses_winrate.slice(0,5)\r\n                                     }\r\n                                ]\r\n                        }}                      \r\n\r\n                        width={100}\r\n                        height={200}\r\n                        options={{ maintainAspectRatio: false }}\r\n                        />\r\n                    </Card.Body>\r\n                  </Card>\r\n\r\n\r\n                  <Card id=\"popular-bacfield\"  style={{ width: cardWidth }}>\r\n                    <Card.Body>\r\n                    <HorizontalBar                              \r\n                      data={{ labels : this.state.popular_fields,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Most popular bac field since 2010\",\r\n                                  backgroundColor: barColor,\r\n                                  data : this.state.popular_fields_number\r\n                                  }\r\n                              ]\r\n                      }}                      \r\n\r\n                      width={100}\r\n                      height={200}\r\n                      options={{ maintainAspectRatio: false }}\r\n                      />\r\n                    </Card.Body>\r\n                  </Card>\r\n                  <Card id=\"best-bacfield\"  style={{ width: cardWidth }}>\r\n                    <Card.Body>\r\n                    <HorizontalBar                              \r\n                      data={{ labels : this.state.best_bacfield,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Top  bac field since 2010\",\r\n                                  backgroundColor: barColor,\r\n                                  data : this.state.best_bacfield_winrate\r\n                                  }\r\n                              ]\r\n                      }}                      \r\n\r\n                      width={100}\r\n                      height={200}\r\n                      options={{ maintainAspectRatio: false }}\r\n                      />\r\n                    </Card.Body>\r\n                  </Card>\r\n                  <Card id=\"best-gender\"  style={{ width: cardWidth }}>\r\n                    <Card.Body>\r\n                    <HorizontalBar                              \r\n                      data={{ labels : this.state.best_gender,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Male Vs Female Admis since  2010\",\r\n                                  backgroundColor: barColor,\r\n                                  data : this.state.best_gender_winrate\r\n                                  }\r\n                              ]\r\n                      }}                      \r\n\r\n                      width={100}\r\n                      height={200}\r\n                      options={{ maintainAspectRatio: false }}\r\n                      />\r\n                    </Card.Body>\r\n                  </Card>\r\n                  </div>              \r\n              </section>\r\n              {\r\n                /* generale info section end */\r\n              }\r\n\r\n              {\r\n                /* year analysis section start */\r\n              }\r\n              <section>\r\n                <header className=\"text-center\">Year Analysis</header>\r\n                <div id=\"year-analysis\">\r\n                <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n                  <div className=\"collapse navbar-collapse\">                   \r\n                    <ul id=\"years_list\" className=\"navbar-nav\">\r\n                     {yearsList}\r\n                    </ul>\r\n                  </div>\r\n                </nav>\r\n                <div>\r\n                <Card id=\"years_analysis_card\">\r\n                    <Card.Body>\r\n                    <Card>\r\n                    <Card.Body>\r\n                      <Bar\r\n                        data={{ labels : this.state.best_gender,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"best modules for\"+this.setState,\r\n                                  backgroundColor: barColor,\r\n                                  data : this.state.best_gender_winrate\r\n                                  }\r\n                              ]\r\n                        }}\r\n                        width={100}\r\n                        height={80}\r\n                       />       \r\n                    </Card.Body>\r\n                  </Card>  \r\n\r\n                   <Card>\r\n                    <Card.Body>\r\n                    <Bar\r\n                        data={{ labels : this.state.best_gender,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Male Vs Female Admis since  2010\",\r\n                                  backgroundColor: barColor,\r\n                                  data : this.state.best_gender_winrate\r\n                                  }\r\n                              ]\r\n                        }}\r\n                        width={100}\r\n                        height={80}\r\n                       />         \r\n                    </Card.Body>\r\n                  </Card> \r\n\r\n                   <Card>\r\n                    <Card.Body>\r\n                    <Bar\r\n                        data={{ labels : this.state.best_gender,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Male Vs Female Admis since  2010\",\r\n                                  backgroundColor: barColor,\r\n                                  data : this.state.best_gender_winrate\r\n                                  }\r\n                              ]\r\n                        }}\r\n                        width={100}\r\n                        height={80}\r\n                       />          \r\n                    </Card.Body>\r\n                  </Card>         \r\n\r\n\r\n                  <Card>\r\n                    <Card.Body>\r\n                    <Bar\r\n                        data={{ labels : this.state.best_gender,  \r\n                              datasets: [\r\n                                { \r\n                                  label: \"Male Vs Female Admis since  2010\",\r\n                                  backgroundColor: barColor,\r\n                                  data : this.state.best_gender_winrate\r\n                                  }\r\n                              ]\r\n                        }}\r\n                        width={100}\r\n                        height={80}\r\n                       />         \r\n                    </Card.Body>\r\n                  </Card> \r\n                    </Card.Body>\r\n                  </Card>\r\n                </div>                \r\n                </div>\r\n              </section>                \r\n              {\r\n                /* year analysis section end */\r\n              }\r\n\r\n            </article>\r\n\r\n            <aside className=\"col-md-4\">\r\n\r\n              <div>\r\n\r\n              </div>\r\n            </aside>\r\n\r\n          </div>    \r\n        </div>\r\n      </div>\r\n      \r\n      \r\n    );\r\n  }\r\n \r\n}\r\n\r\nexport default  Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}